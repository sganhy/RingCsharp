Renamed Types:

[Ring]Ring.Web.Constants -> [Ring]A.a
{

	[Ring]Ring.Web.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Web.Constants::MsgServerRunning -> A
	System.String [Ring]System.String Ring.Web.Constants::MsgClassNotSupported -> a
	System.String [Ring]System.String Ring.Web.Constants::HttpListenerPrefix -> B
}

[Ring]Ring.Web.Helpers.Constants -> [Ring]A.B
{

	[Ring]Ring.Web.Helpers.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagHtml -> A
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagHead -> a
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagBody -> B
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagCenter -> b
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagTitle -> C
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagH1 -> c
	System.String [Ring]System.String Ring.Web.Helpers.Constants::TagHr -> D
	System.String [Ring]System.String Ring.Web.Helpers.Constants::OpenTag -> d
	System.String [Ring]System.String Ring.Web.Helpers.Constants::OpenTagWithAttribute -> E
	System.String [Ring]System.String Ring.Web.Helpers.Constants::CloseTag -> e
	System.String [Ring]System.String Ring.Web.Helpers.Constants::AttributeElement -> F
	System.String [Ring]System.String Ring.Web.Helpers.Constants::AttributeBgcolor -> f
}

[Ring]Ring.Web.Enums.HtmlAttribute -> [Ring]A.c
{
	Ring.Web.Enums.HtmlAttribute [Ring]Ring.Web.Enums.HtmlAttribute Ring.Web.Enums.HtmlAttribute::Bgcolor -> A

	System.Int32 [Ring]System.Int32 Ring.Web.Enums.HtmlAttribute::value__ skipped:  special name
}

[Ring]Ring.Web.Enums.HtmlTag -> [Ring]A.D
{
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Html -> A
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Head -> a
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Body -> B
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Center -> b
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Title -> C
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::H1 -> c
	Ring.Web.Enums.HtmlTag [Ring]Ring.Web.Enums.HtmlTag Ring.Web.Enums.HtmlTag::Hr -> D

	System.Int32 [Ring]System.Int32 Ring.Web.Enums.HtmlTag::value__ skipped:  special name
}

[Ring]Ring.Web.Enums.HttpVerb -> [Ring]A.d
{
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Post -> A
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Get -> a
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Put -> B
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Patch -> b
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Delete -> C
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Options -> c
	Ring.Web.Enums.HttpVerb [Ring]Ring.Web.Enums.HttpVerb Ring.Web.Enums.HttpVerb::Other -> D

	System.Int32 [Ring]System.Int32 Ring.Web.Enums.HttpVerb::value__ skipped:  special name
}

[Ring]Ring.Web.Core.Extensions.Constants -> [Ring]A.E
{
	[Ring]Ring.Web.Core.Extensions.Constants::GetHtmlWarning[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> A

	[Ring]Ring.Web.Core.Extensions.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::MediaTypeJson -> A
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::MediaTypeHtml -> a
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::MediaTypePdf -> B
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::ContentTypeGzip -> b
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpPost -> C
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpGet -> c
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpPut -> D
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpPatch -> d
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpDelete -> E
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HttpOptions -> e
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::StatusDescription405 -> F
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::NoCacheHeaderValue -> f
	System.String [Ring]System.String Ring.Web.Core.Extensions.Constants::HtmlMessage405 -> G
	System.Byte[] [Ring]System.Byte[] Ring.Web.Core.Extensions.Constants::HtmlMessageNotAllowed -> A
	System.Char [Ring]System.Char Ring.Web.Core.Extensions.Constants::NewLine -> A
}

[Ring]Ring.Util.Constants -> [Ring]A.f
{
	[Ring]Ring.Util.Constants::GetCharValues[0]( ) -> A

	[Ring]Ring.Util.Constants::.cctor[0]( ) skipped:  special name

	System.Char [Ring]System.Char Ring.Util.Constants::SnakeCaseSeparator -> A
	System.Char [Ring]System.Char Ring.Util.Constants::Space -> a
	System.Int32 [Ring]System.Int32 Ring.Util.Constants::MinCapacity -> A
	System.String [Ring]System.String Ring.Util.Constants::ArgObjectPoolExceptionName -> A
	System.String [Ring]System.String Ring.Util.Constants::ArgObjectPoolExceptionMsg -> a
	System.Char [Ring]System.Char Ring.Util.Constants::PathSeparator -> B
	System.String [Ring]System.String Ring.Util.Constants::XmlRelationSuffix -> B
	System.String [Ring]System.String Ring.Util.Constants::XmlRelationshipNode -> b
	System.String [Ring]System.String Ring.Util.Constants::XmlRelationshipTarget -> C
	System.String [Ring]System.String Ring.Util.Constants::XmlFileExtension -> c
	System.String [Ring]System.String Ring.Util.Constants::XmlSharedStringsFile -> D
	System.String [Ring]System.String Ring.Util.Constants::XmlWorkgroupFile -> d
	System.String [Ring]System.String Ring.Util.Constants::XmlCoreFile -> E
	System.String [Ring]System.String Ring.Util.Constants::XmlCreatorNode -> e
	System.String [Ring]System.String Ring.Util.Constants::XmlCreated -> F
	System.String [Ring]System.String Ring.Util.Constants::XmlModified -> f
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetNode -> G
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetNameAttribute -> g
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetIdAttribute -> H
	System.String [Ring]System.String Ring.Util.Constants::XmlStartSheetDocument -> h
	System.String [Ring]System.String Ring.Util.Constants::XmlEndSheetDocument -> I
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataRow -> i
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataRowAttribute -> J
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataColAttribute -> j
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataTypeAttribute -> K
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetFormatTypeAttribute -> k
	System.Int32 [Ring]System.Int32 Ring.Util.Constants::XmlSheetFormatTypeDateTimeMin -> a
	System.Int32 [Ring]System.Int32 Ring.Util.Constants::XmlSheetFormatTypeDateTimeMax -> B
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataTypeStringAttribute -> L
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetDataColValAttribute -> l
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetMergedCellInfo -> M
	System.String [Ring]System.String Ring.Util.Constants::XmlSheetMergeRef -> m
	System.Char[] [Ring]System.Char[] Ring.Util.Constants::FillInCharsList -> A
	System.Char[] [Ring]System.Char[] Ring.Util.Constants::BaseChars -> a
	System.Collections.Generic.Dictionary`2<System.Char,System.Int32> [Ring]System.Collections.Generic.Dictionary`2<System.Char,System.Int32> Ring.Util.Constants::CharValues -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Constants::MaxExternalkeySize -> b
	System.Int32 [Ring]System.Int32 Ring.Util.Constants::Radix -> C
	System.Random [Ring]System.Random Ring.Util.Constants::Rand -> A
}

[Ring]Ring.Util.ExcelWorkbook -> [Ring]A.G
{
	[Ring]Ring.Util.ExcelWorkbook::LoadDocument[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.ExcelWorkbook::get_SheetCount[0]( ) -> A
	[Ring]Ring.Util.ExcelWorkbook::get_FileName[0]( ) -> a
	[Ring]Ring.Util.ExcelWorkbook::get_Modified[0]( ) -> B
	[Ring]Ring.Util.ExcelWorkbook::get_Created[0]( ) -> b
	[Ring]Ring.Util.ExcelWorkbook::get_Creator[0]( ) -> C
	[Ring]Ring.Util.ExcelWorkbook::get_DuplicateMergedCell[0]( ) -> c
	[Ring]Ring.Util.ExcelWorkbook::set_DuplicateMergedCell[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Util.ExcelWorkbook::get_MergedCells[0]( ) -> D
	[Ring]Ring.Util.ExcelWorkbook::GetSheet[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Util.ExcelWorkbook::GetSheet[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Util.ExcelWorkbook::LoadSharedString[1]( [System.Xml.ReaderWriter]System.Xml.XmlReader ) -> A
	[Ring]Ring.Util.ExcelWorkbook::LoadRelationInformation[1]( [System.Xml.ReaderWriter]System.Xml.XmlReader ) -> a
	[Ring]Ring.Util.ExcelWorkbook::LoadSheetInformation[1]( [System.Xml.ReaderWriter]System.Xml.XmlReader ) -> B
	[Ring]Ring.Util.ExcelWorkbook::LoadSheetData[3]( [System.Runtime]System.String, [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String[] ) -> A
	[Ring]Ring.Util.ExcelWorkbook::GetSheetIndex[1]( [System.Runtime]System.String ) -> B
	[Ring]Ring.Util.ExcelWorkbook::GetData[2]( [System.Runtime]System.String[], [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Util.ExcelWorkbook::LoadCoreData[1]( [System.Xml.ReaderWriter]System.Xml.XmlReader ) -> b
	[Ring]Ring.Util.ExcelWorkbook::RemovePathInfo[1]( [System.Runtime]System.String ) -> b

	[Ring]Ring.Util.ExcelWorkbook::.ctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Util.ExcelWorkbook::_fileName -> A
	Ring.Util.Models.ExcelSheet[] [Ring]Ring.Util.Models.ExcelSheet[] Ring.Util.ExcelWorkbook::_sheetList -> A
	System.String [Ring]System.String Ring.Util.ExcelWorkbook::_creator -> a
	System.DateTime [Ring]System.DateTime Ring.Util.ExcelWorkbook::_created -> A
	System.DateTime [Ring]System.DateTime Ring.Util.ExcelWorkbook::_modified -> a
	System.Collections.Generic.List`1<System.String> [Ring]System.Collections.Generic.List`1<System.String> Ring.Util.ExcelWorkbook::_mergedCellList -> A
	System.Boolean [Ring]System.Boolean Ring.Util.ExcelWorkbook::<DuplicateMergedCell>k__BackingField -> A

	System.Int32 [Ring]System.Int32 Ring.Util.ExcelWorkbook::SheetCount -> dropped
	System.String [Ring]System.String Ring.Util.ExcelWorkbook::FileName -> dropped
	System.DateTime [Ring]System.DateTime Ring.Util.ExcelWorkbook::Modified -> dropped
	System.DateTime [Ring]System.DateTime Ring.Util.ExcelWorkbook::Created -> dropped
	System.String [Ring]System.String Ring.Util.ExcelWorkbook::Creator -> dropped
	System.Boolean [Ring]System.Boolean Ring.Util.ExcelWorkbook::DuplicateMergedCell -> dropped
	System.Collections.Generic.List`1<System.String> [Ring]System.Collections.Generic.List`1<System.String> Ring.Util.ExcelWorkbook::MergedCells -> dropped
}

[Ring]Ring.Util.HashMap`2 -> [Ring]A.g`2
{
	[Ring]Ring.Util.HashMap`2::Add[2]( !0, !1 ) -> A
	[Ring]Ring.Util.HashMap`2::Get[1]( !0 ) -> A
	[Ring]Ring.Util.HashMap`2::Remove[1]( !0 ) -> a
	[Ring]Ring.Util.HashMap`2::Find[1]( !0 ) -> B
	[Ring]Ring.Util.HashMap`2::Expand[0]( ) -> A
	[Ring]Ring.Util.HashMap`2::Rehash[1]( [System.Runtime]System.Int32 ) -> A

	[Ring]Ring.Util.HashMap`2::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Util.HashMap`2::.ctor[1]( [System.Runtime]System.Int32 ) skipped:  special name

	Ring.Util.HashMap`2/Entry<TKey,TValue>[] [Ring]Ring.Util.HashMap`2/Entry<TKey,TValue>[] Ring.Util.HashMap`2::_buckets -> A
	System.Int32 [Ring]System.Int32 Ring.Util.HashMap`2::_count -> A
}

[Ring]Ring.Util.ObjectPool`1 -> [Ring]A.I`1
{
	[Ring]Ring.Util.ObjectPool`1::Get[0]( ) -> A
	[Ring]Ring.Util.ObjectPool`1::Put[1]( !0 ) -> A

	[Ring]Ring.Util.ObjectPool`1::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Util.ObjectPool`1::.ctor[1]( [System.Runtime]System.Int32 ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Util.ObjectPool`1::_maxSize -> A
	System.Object [Ring]System.Object Ring.Util.ObjectPool`1::_locker -> A
	System.Collections.Generic.Queue`1<T> [Ring]System.Collections.Generic.Queue`1<T> Ring.Util.ObjectPool`1::_queue -> A
	System.Int32 [Ring]System.Int32 Ring.Util.ObjectPool`1::_count -> a
}

[Ring]Ring.Util.Models.ExcelColumn -> [Ring]A.i
{

	[Ring]Ring.Util.Models.ExcelColumn::.ctor[4]( [System.Runtime]System.String, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.Int32,[System.Runtime]System.String> ) skipped:  special name

	System.Collections.Generic.Dictionary`2<System.Int32,System.String> [Ring]System.Collections.Generic.Dictionary`2<System.Int32,System.String> Ring.Util.Models.ExcelColumn::Cells -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelColumn::FirstRowNum -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelColumn::LastRowNum -> a
	System.String [Ring]System.String Ring.Util.Models.ExcelColumn::Name -> A
}

[Ring]Ring.Util.Models.ExcelField -> [Ring]A.J
{

	[Ring]Ring.Util.Models.ExcelField::.ctor[5]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Util.Models.ExcelColumn, [System.Runtime]System.Int32, [System.Runtime]System.Boolean ) skipped:  special name

	Ring.Util.Models.ExcelColumn [Ring]Ring.Util.Models.ExcelColumn Ring.Util.Models.ExcelField::Column -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Util.Models.ExcelField::Field -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelField::HeaderRowId -> A
	System.Boolean [Ring]System.Boolean Ring.Util.Models.ExcelField::Key -> A
	Ring.Schema.Models.Relation [Ring]Ring.Schema.Models.Relation Ring.Util.Models.ExcelField::Relation -> A
}

[Ring]Ring.Util.Models.ExcelSheet -> [Ring]A.j
{

	[Ring]Ring.Util.Models.ExcelSheet::.ctor[7]( [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Util.Models.ExcelColumn[], [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) skipped:  special name

	System.String [Ring]System.String Ring.Util.Models.ExcelSheet::FileName -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelSheet::FirstRowNum -> A
	System.String [Ring]System.String Ring.Util.Models.ExcelSheet::Id -> a
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelSheet::LastRowNum -> a
	System.String [Ring]System.String Ring.Util.Models.ExcelSheet::Name -> B
	System.Int32 [Ring]System.Int32 Ring.Util.Models.ExcelSheet::Priority -> B
	Ring.Util.Models.ExcelColumn[] [Ring]Ring.Util.Models.ExcelColumn[] Ring.Util.Models.ExcelSheet::Columns -> A
}

[Ring]Ring.Util.Enums.ExcelCellType -> [Ring]A.L
{
	Ring.Util.Enums.ExcelCellType [Ring]Ring.Util.Enums.ExcelCellType Ring.Util.Enums.ExcelCellType::Text -> A
	Ring.Util.Enums.ExcelCellType [Ring]Ring.Util.Enums.ExcelCellType Ring.Util.Enums.ExcelCellType::Number -> a

	System.Byte [Ring]System.Byte Ring.Util.Enums.ExcelCellType::value__ skipped:  special name
}

[Ring]Ring.Util.Builders.Constants -> [Ring]A.N
{

	[Ring]Ring.Util.Builders.Constants::.cctor[0]( ) skipped:  special name

	System.Char [Ring]System.Char Ring.Util.Builders.Constants::RelationSeparator -> A
	System.Char [Ring]System.Char Ring.Util.Builders.Constants::MinDigitDelimiter -> a
	System.Char [Ring]System.Char Ring.Util.Builders.Constants::MaxDigitDelimiter -> B
	System.Char [Ring]System.Char Ring.Util.Builders.Constants::MergeRangeSplit -> b
	System.String [Ring]System.String Ring.Util.Builders.Constants::SheetHeaderTableName -> A
	System.String [Ring]System.String Ring.Util.Builders.Constants::SheetHeaderFieldName -> a
	System.String [Ring]System.String Ring.Util.Builders.Constants::SheetHeaderKeyFieldName -> B
	System.String [Ring]System.String Ring.Util.Builders.Constants::SheetHeaderSourceName -> b
	System.Char [Ring]System.Char Ring.Util.Builders.Constants::KeySperator -> C
	System.String [Ring]System.String Ring.Util.Builders.Constants::LexiconItemLexiId -> C
	System.String [Ring]System.String Ring.Util.Builders.Constants::MetaDataId -> c
	System.String [Ring]System.String Ring.Util.Builders.Constants::MetaDataRefId -> D
	System.String [Ring]System.String Ring.Util.Builders.Constants::MetaDataValue -> d
	Ring.Util.Models.ExcelField[] [Ring]Ring.Util.Models.ExcelField[] Ring.Util.Builders.Constants::DefaultExcelField -> A
	System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.Dictionary`2<System.Int32,System.String>>[] [Ring]System.Collections.Generic.KeyValuePair`2<System.String,System.Collections.Generic.Dictionary`2<System.Int32,System.String>>[] Ring.Util.Builders.Constants::DefaultColumnArray -> A
}

[Ring]Ring.Util.Builders.RecordBuilder -> [Ring]A.o
{
	[Ring]Ring.Util.Builders.RecordBuilder::GetInstances[2]( [System.Runtime]System.Int32, [Ring]Ring.Util.Models.ExcelSheet ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GetInstance[4]( [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Int32, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GetLexiconItemList[2]( [System.Runtime]System.Int32, [Ring]Ring.Util.Models.ExcelSheet ) -> a
	[Ring]Ring.Util.Builders.RecordBuilder::GetColumn[2]( [Ring]Ring.Util.Models.ExcelSheet, [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GenerateKey[4]( [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GetLanguageList[1]( [Ring]Ring.Util.Models.ExcelSheet ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GetTableId[3]( [System.Runtime]System.Int32, [Ring]Ring.Util.Models.ExcelColumn, [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Util.Builders.RecordBuilder::GetFielId[4]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [Ring]Ring.Util.Models.ExcelColumn, [Ring]Ring.Schema.Models.Schema ) -> A

	[Ring]Ring.Util.Builders.RecordBuilder::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.LanguageBuilder [Ring]Ring.Schema.Builders.LanguageBuilder Ring.Util.Builders.RecordBuilder::_languageBuilder -> A
}

[Ring]Ring.Schema.Constants -> [Ring]A.P
{

	[Ring]Ring.Schema.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Schema.Constants::EntityName -> A
	System.String [Ring]System.String Ring.Schema.Constants::EntityDecription -> a
	System.String [Ring]System.String Ring.Schema.Constants::EntityId -> B
	System.String [Ring]System.String Ring.Schema.Constants::FieldNameDefaultDataType -> b
	System.String [Ring]System.String Ring.Schema.Constants::FieldNameDefaultSize -> C
	System.String [Ring]System.String Ring.Schema.Constants::FieldCaseSensitif -> c
	System.String [Ring]System.String Ring.Schema.Constants::FieldNotNull -> D
	System.Char [Ring]System.Char Ring.Schema.Constants::IndentationChar -> A
	System.String [Ring]System.String Ring.Schema.Constants::XmlFieldName -> d
	System.String [Ring]System.String Ring.Schema.Constants::XmlFieldListName -> E
	System.String [Ring]System.String Ring.Schema.Constants::XmlRelationName -> e
	System.String [Ring]System.String Ring.Schema.Constants::XmlRelationListName -> F
	System.String [Ring]System.String Ring.Schema.Constants::XmlIndexName -> f
	System.String [Ring]System.String Ring.Schema.Constants::XmlIndexListName -> G
	System.String [Ring]System.String Ring.Schema.Constants::XmlRelationTo -> g
	System.String [Ring]System.String Ring.Schema.Constants::XmlRelationType -> H
	System.String [Ring]System.String Ring.Schema.Constants::XmlRelationInverseRelation -> h
	System.String [Ring]System.String Ring.Schema.Constants::XmlIndexUnique -> I
	System.String [Ring]System.String Ring.Schema.Constants::XmlIndexField -> i
}

[Ring]Ring.Schema.Models.BaseEntity -> [Ring]A.p
{

	[Ring]Ring.Schema.Models.BaseEntity::.ctor[5]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Boolean [Ring]System.Boolean Ring.Schema.Models.BaseEntity::Active -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.BaseEntity::Baseline -> a
	System.String [Ring]System.String Ring.Schema.Models.BaseEntity::Description -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.BaseEntity::Id -> A
	System.String [Ring]System.String Ring.Schema.Models.BaseEntity::Name -> a
}

[Ring]Ring.Schema.Models.CacheId -> [Ring]A.Q
{

	[Ring]Ring.Schema.Models.CacheId::.ctor[4]( [System.Runtime]System.Object, [System.Runtime]System.Int64, [System.Runtime]System.Int64, [System.Runtime]System.Int32 ) skipped:  special name

	System.Object [Ring]System.Object Ring.Schema.Models.CacheId::Sync -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.CacheId::CurrentId -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.CacheId::MaxId -> a
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.CacheId::ReservedRange -> A
}

[Ring]Ring.Schema.Models.LexiconIndex -> [Ring]A.q
{

	[Ring]Ring.Schema.Models.LexiconIndex::.ctor[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Models.LexiconIndex::FieldId -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.LexiconIndex::Index -> a
}

[Ring]Ring.Schema.Models.MetaData -> [Ring]A.R
{

	[Ring]Ring.Schema.Models.MetaData::.ctor[0]( ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Models.MetaData::DataType -> A
	System.String [Ring]System.String Ring.Schema.Models.MetaData::Description -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.MetaData::Flags -> A
	System.String [Ring]System.String Ring.Schema.Models.MetaData::Id -> a
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.MetaData::LineNumber -> a
	System.String [Ring]System.String Ring.Schema.Models.MetaData::Name -> B
	System.SByte [Ring]System.SByte Ring.Schema.Models.MetaData::ObjectType -> A
	System.String [Ring]System.String Ring.Schema.Models.MetaData::RefId -> b
	System.String [Ring]System.String Ring.Schema.Models.MetaData::Value -> C
}

[Ring]Ring.Schema.Models.MetaDataId -> [Ring]A.r
{

	[Ring]Ring.Schema.Models.MetaDataId::.ctor[3]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int64 ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Models.MetaDataId::Id -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.MetaDataId::ObjectType -> a
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.MetaDataId::Value -> A
}

[Ring]Ring.Schema.Models.ValidationItem -> [Ring]A.S
{

	[Ring]Ring.Schema.Models.ValidationItem::.ctor[5]( [System.Runtime]System.Int64, [System.Runtime]System.Int64, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.LogLevel ) skipped:  special name

	System.Int64 [Ring]System.Int64 Ring.Schema.Models.ValidationItem::Id -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.ValidationItem::LineNumber -> a
	System.DateTime [Ring]System.DateTime Ring.Schema.Models.ValidationItem::ValidationTime -> A
	System.String [Ring]System.String Ring.Schema.Models.ValidationItem::Name -> A
	System.String [Ring]System.String Ring.Schema.Models.ValidationItem::Description -> a
	Ring.Schema.Enums.LogLevel [Ring]Ring.Schema.Enums.LogLevel Ring.Schema.Models.ValidationItem::Level -> A
}

[Ring]Ring.Schema.Mappers.Constants -> [Ring]A.s
{

	[Ring]Ring.Schema.Mappers.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataId -> A
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataName -> a
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataDescription -> B
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataRefId -> b
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataObjectType -> C
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataDataType -> c
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataFlags -> D
	System.String [Ring]System.String Ring.Schema.Mappers.Constants::MetaDataValue -> d
	System.Int64 [Ring]System.Int64 Ring.Schema.Mappers.Constants::EntityTypeIdTable -> A
}

[Ring]Ring.Schema.Helpers.Constants -> [Ring]A.t
{

	[Ring]Ring.Schema.Helpers.Constants::.cctor[0]( ) skipped:  special name

	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::Space -> A
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::DoubleSpace -> A
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::Underscore -> a
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::DoubleQuote -> B
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::SchemaSeparator -> b
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::CreateTable -> a
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::DropTable -> B
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AlterTable -> b
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AlterTableAddColumn -> C
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AlterTableRemoveColumn -> c
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AlterIfNotExist -> D
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AlterIfExist -> d
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::Index -> E
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::CreateIndex -> e
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::DropIndex -> F
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::CreateUniqueIndex -> f
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::CreateSchema -> G
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::TableSpace -> g
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::NotNull -> H
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::TruncateTable -> h
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AnalyzeTable -> I
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::VacuumTable -> i
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::AddConstraint -> J
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::IndexOnTable -> j
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::StartClause -> C
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::EndClause -> c
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::EndStatement -> D
	System.Char [Ring]System.Char Ring.Schema.Helpers.Constants::CommaSeparator -> d
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PrimaryKeyPrefix -> K
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::ForeignKeyPrefix -> k
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PrimaryKey -> L
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::ForeignKey -> l
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::Reference -> M
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SearchablePrefixClfy -> m
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteTableDelimiter -> N
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteString -> n
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteNumber -> O
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteFloat -> o
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteFieldSize -> P
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteNumberConstraint -> p
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteLongConstraint -> Q
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteIntConstraint -> q
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteShortConstraint -> R
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteByteConstraint -> r
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteBoolConstraint -> S
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteDateConstraint -> s
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::SqliteRelationRef -> T
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreLong -> t
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreInt -> U
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreShort -> u
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreBool -> V
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreDouble -> v
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreFloat -> W
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreString -> w
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreBigString -> X
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreDate -> x
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreDateTime -> Y
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreStringConstraint -> y
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreByteConstraint -> Z
	System.Int32 [Ring]System.Int32 Ring.Schema.Helpers.Constants::PostgreMaxVarcharSize -> A
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreToUpperCase -> z
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::CreateUnloggedTable -> aA
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreStorageParameters -> aa
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreCreateTableSpace -> aB
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreTableSpaceLocation -> ab
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::PostgreTableSpaceIndex -> aC
	System.Int32 [Ring]System.Int32 Ring.Schema.Helpers.Constants::MaxSizeObjectName -> a
	System.Int32 [Ring]System.Int32 Ring.Schema.Helpers.Constants::MaxSizeObjectNameWithPrefix -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Helpers.Constants::ScriptTypePadding -> b
	System.Int32 [Ring]System.Int32 Ring.Schema.Helpers.Constants::ScriptNamePadding -> C
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::MetaDataId -> ac
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::MetaDataSchemaId -> aD
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::MetaDataRefId -> ad
	System.String [Ring]System.String Ring.Schema.Helpers.Constants::MetaDataObjectType -> aE
}

[Ring]Ring.Schema.Enums.ConstraintType -> [Ring]A.v
{
	Ring.Schema.Enums.ConstraintType [Ring]Ring.Schema.Enums.ConstraintType Ring.Schema.Enums.ConstraintType::PrimaryKey -> A
	Ring.Schema.Enums.ConstraintType [Ring]Ring.Schema.Enums.ConstraintType Ring.Schema.Enums.ConstraintType::ForeignKey -> a

	System.Byte [Ring]System.Byte Ring.Schema.Enums.ConstraintType::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.DatabaseCollectionStatus -> [Ring]A.W
{
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Schema.Enums.DatabaseCollectionStatus::NotReady -> A
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Schema.Enums.DatabaseCollectionStatus::Ready -> a
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Schema.Enums.DatabaseCollectionStatus::Loading -> B
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Schema.Enums.DatabaseCollectionStatus::Upgrading -> b

	System.Byte [Ring]System.Byte Ring.Schema.Enums.DatabaseCollectionStatus::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.DatabaseOperation -> [Ring]A.w
{
	Ring.Schema.Enums.DatabaseOperation [Ring]Ring.Schema.Enums.DatabaseOperation Ring.Schema.Enums.DatabaseOperation::Create -> A
	Ring.Schema.Enums.DatabaseOperation [Ring]Ring.Schema.Enums.DatabaseOperation Ring.Schema.Enums.DatabaseOperation::Delete -> a
	Ring.Schema.Enums.DatabaseOperation [Ring]Ring.Schema.Enums.DatabaseOperation Ring.Schema.Enums.DatabaseOperation::None -> B

	System.Byte [Ring]System.Byte Ring.Schema.Enums.DatabaseOperation::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.EntityType -> [Ring]A.X
{
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Null -> A
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Table -> a
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Field -> B
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Relation -> b
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Index -> C
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Schema -> c
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Service -> D
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Role -> d
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Lexicon -> E
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Language -> e
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Sequence -> F
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Assembly -> f
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Event -> G
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::TableSpace -> g
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::NotDefined -> H
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Enums.EntityType::Comment -> h

	System.SByte [Ring]System.SByte Ring.Schema.Enums.EntityType::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.FieldKey -> [Ring]A.x
{
	Ring.Schema.Enums.FieldKey [Ring]Ring.Schema.Enums.FieldKey Ring.Schema.Enums.FieldKey::Name -> A
	Ring.Schema.Enums.FieldKey [Ring]Ring.Schema.Enums.FieldKey Ring.Schema.Enums.FieldKey::SchemaName -> a

	System.Int32 [Ring]System.Int32 Ring.Schema.Enums.FieldKey::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.FieldType -> [Ring]A.Y
{
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Long -> A
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Int -> a
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Short -> B
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Byte -> b
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Float -> C
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Double -> c
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::String -> D
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::ShortDateTime -> d
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::DateTime -> E
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::LongDateTime -> e
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Array -> F
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::Boolean -> f
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Enums.FieldType::NotDefined -> G

	System.Byte [Ring]System.Byte Ring.Schema.Enums.FieldType::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.LogLevel -> [Ring]A.y
{
	Ring.Schema.Enums.LogLevel [Ring]Ring.Schema.Enums.LogLevel Ring.Schema.Enums.LogLevel::Error -> A
	Ring.Schema.Enums.LogLevel [Ring]Ring.Schema.Enums.LogLevel Ring.Schema.Enums.LogLevel::Info -> a
	Ring.Schema.Enums.LogLevel [Ring]Ring.Schema.Enums.LogLevel Ring.Schema.Enums.LogLevel::Warning -> B
	Ring.Schema.Enums.LogLevel [Ring]Ring.Schema.Enums.LogLevel Ring.Schema.Enums.LogLevel::Fatal -> b

	System.Int16 [Ring]System.Int16 Ring.Schema.Enums.LogLevel::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.PhysicalType -> [Ring]A.Z
{
	Ring.Schema.Enums.PhysicalType [Ring]Ring.Schema.Enums.PhysicalType Ring.Schema.Enums.PhysicalType::Table -> A
	Ring.Schema.Enums.PhysicalType [Ring]Ring.Schema.Enums.PhysicalType Ring.Schema.Enums.PhysicalType::View -> a

	System.Byte [Ring]System.Byte Ring.Schema.Enums.PhysicalType::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.RelationType -> [Ring]A.z
{
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::Otop -> A
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::Otm -> a
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::Mtm -> B
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::Mto -> b
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::Otof -> C
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Enums.RelationType::NotDefined -> c

	System.Byte [Ring]System.Byte Ring.Schema.Enums.RelationType::value__ skipped:  special name
}

[Ring]Ring.Schema.Enums.TableType -> [Ring]a.A
{
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Business -> A
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Meta -> a
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::MetaId -> B
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Fake -> b
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Mtm -> C
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Log -> c
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::Lexicon -> D
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::LexiconItem -> d
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::User -> E
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::SchemaDictionary -> e
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::TableDictionary -> F
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Enums.TableType::TableSpaceDictionary -> f

	System.Byte [Ring]System.Byte Ring.Schema.Enums.TableType::value__ skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Constants -> [Ring]a.a
{

	[Ring]Ring.Schema.Core.Rules.Constants::.cctor[0]( ) skipped:  special name

	Ring.Schema.Core.Rules.IValidationRule`1<Ring.Schema.Models.MetaData>[] [Ring]Ring.Schema.Core.Rules.IValidationRule`1<Ring.Schema.Models.MetaData>[] Ring.Schema.Core.Rules.Constants::MetadaValidators -> A
}

[Ring]Ring.Schema.Core.Rules.Impl.Constants -> [Ring]a.b
{
	[Ring]Ring.Schema.Core.Rules.Impl.Constants::GetValidationInstance[4]( [System.Runtime]System.Int64, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.LogLevel ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.Constants::.cctor[0]( ) skipped:  special name

	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.Constants::MaxValidation -> A
	System.String [Ring]System.String Ring.Schema.Core.Rules.Impl.Constants::MetadaName -> A
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataInvalidName -> A
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataEmptyName -> a
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataNameIsTooLong -> B
	System.String [Ring]System.String Ring.Schema.Core.Rules.Impl.Constants::MetadaId -> a
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataEmptyId -> b
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataInvalidId -> C
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataOutOfRangeId -> c
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataInvalidType -> D
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataInvalidTo -> d
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataDuplicateId -> E
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataDuplicateName -> e
	System.String [Ring]System.String Ring.Schema.Core.Rules.Impl.Constants::MetadaRelationId -> B
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataRelationInverse -> F
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataRelationTypeInverse -> f
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataDuplicateIndexDef -> G
	Ring.Schema.Models.ValidationItem [Ring]Ring.Schema.Models.ValidationItem Ring.Schema.Core.Rules.Impl.Constants::MetadataInvalidIndexDef -> g
	System.String [Ring]System.String Ring.Schema.Core.Rules.Impl.Constants::MsgCharSeparator -> b
	System.Char [Ring]System.Char Ring.Schema.Core.Rules.Impl.Constants::IndexFieldSeparator -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.Constants::NotDefinedFieldTypeId -> a
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.Constants::TableIdNotFound -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Rules.Impl.Constants::MaxSizeObjectName -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Rules.Impl.Constants::MaxSizeObjectNameWithPrefix -> a
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult -> [Ring]a.e
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::get_ErrorCount[0]( ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::get_FatalCount[0]( ) -> a
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::get_WarningCount[0]( ) -> B
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::get_Validations[0]( ) -> b
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::AddItem[5]( [System.Runtime]System.Int64, [System.Runtime]System.Int64, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.LogLevel ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::Merge[1]( [Ring]Ring.Schema.Core.Rules.Impl.ValidationResult ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::get_IsBlockingDefect[0]( ) -> C

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationResult::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Ring.Schema.Models.ValidationItem> [Ring]System.Collections.Generic.List`1<Ring.Schema.Models.ValidationItem> Ring.Schema.Core.Rules.Impl.ValidationResult::_items -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::_errorCount -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::_fatalCount -> a
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::_warningCount -> B

	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::ErrorCount -> dropped
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::FatalCount -> dropped
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Rules.Impl.ValidationResult::WarningCount -> dropped
	System.Collections.Generic.IEnumerable`1<Ring.Schema.Models.ValidationItem> [Ring]System.Collections.Generic.IEnumerable`1<Ring.Schema.Models.ValidationItem> Ring.Schema.Core.Rules.Impl.ValidationResult::Validations -> dropped
	System.Boolean [Ring]System.Boolean Ring.Schema.Core.Rules.Impl.ValidationResult::IsBlockingDefect -> dropped
}

[Ring]Ring.Schema.Core.Extensions.Constants -> [Ring]a.f
{

	[Ring]Ring.Schema.Core.Extensions.Constants::.cctor[0]( ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableId -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::SchemaId -> a
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldId -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::IndexId -> b
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::RelationId -> C
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::ServiceId -> c
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::SequenceId -> D
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::LanguageId -> d
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::LexiconId -> E
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TablespaceId -> e
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Core.Extensions.Constants::DefaultPrimaryKey -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Core.Extensions.Constants::DefaultShortPrimaryKey -> a
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Core.Extensions.Constants::DefaultIntPrimaryKey -> B
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Core.Extensions.Constants::DefaultClflyPrimaryKey -> b
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::DisabledCacheId -> F
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::MinimumCacheId -> f
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::DefaultEntityName -> A
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::DefaultEntityDescription -> a
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldNotNullBitPosition -> G
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldCaseSensitifBitPosition -> g
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::IndexUniqueBitPosition -> H
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::IndexBitmapBitPosition -> h
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::SchemaClfyBitPosition -> I
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::SchemaNativeBitPosition -> i
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableSpaceTableBitPosition -> J
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableSpaceIndexBitPosition -> j
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableSpaceReadonlyBitPosition -> K
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldMultilingualBitPosition -> k
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::EntityEnabledBitPosition -> L
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::EntityBaselinedBitPosition -> l
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableReadonlyBitPosition -> M
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::RelationFirstBitPositionType -> m
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldFirstBitPositionSize -> N
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableCacheIdBitPosition -> n
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::TableChachedBitPosition -> O
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::RelationNotNullBitPosition -> o
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::RelationConstraintBitPosition -> P
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Extensions.Constants::DefaultFlags -> A
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::ReferenceIdNotFound -> B
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataRefId -> b
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataName -> C
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataSchemaId -> c
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataId -> D
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataObjectType -> d
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataValue -> E
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataDescription -> e
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::MetaDataFlags -> F
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::SelectSeparator -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::FieldNameNotFound -> p
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::RelationNameNotFound -> Q
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::LexiconNotFound -> q
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::SearchablePrefixClfy -> f
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::PostgreConflictClause -> G
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::FolderSeperatorWin -> a
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::FolderSeperatorUni -> B
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::IndexKeySeparator -> b
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::PaddingIndexName -> C
	System.Char [Ring]System.Char Ring.Schema.Core.Extensions.Constants::Underscore -> c
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::IndexPrefixDefault -> g
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::SequenceJobIdName -> H
	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.Constants::NotDefinedFieldTypeId -> R
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::FieldDefaultDate -> h
	System.String [Ring]System.String Ring.Schema.Core.Extensions.Constants::DefaultNumericValue -> I
}

[Ring]Ring.Schema.Core.Extensions.FieldExtension -> [Ring]a.g
{
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::IsDateTime[1]( [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::IsNumeric[1]( [Ring]Ring.Schema.Models.Field ) -> a
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::IsPrimaryKey[1]( [Ring]Ring.Schema.Models.Field ) -> B
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::GetSearchableValue[2]( [Ring]Ring.Schema.Models.Field, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::IsUnique[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::Add[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::Remove[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Core.Extensions.FieldExtension::GetNewFieldId[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Field ) -> A

	[Ring]Ring.Schema.Core.Extensions.FieldExtension::.cctor[0]( ) skipped:  special name

	Ring.Schema.Builders.MetaDataBuilder [Ring]Ring.Schema.Builders.MetaDataBuilder Ring.Schema.Core.Extensions.FieldExtension::MetaDataBuilder -> A
}

[Ring]Ring.Schema.Core.Extensions.MetaDataExtension -> [Ring]a.i
{
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTable[1]( [Ring]Ring.Schema.Models.MetaData ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsSchema[1]( [Ring]Ring.Schema.Models.MetaData ) -> a
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsField[1]( [Ring]Ring.Schema.Models.MetaData ) -> B
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsIndex[1]( [Ring]Ring.Schema.Models.MetaData ) -> b
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsLexicon[1]( [Ring]Ring.Schema.Models.MetaData ) -> C
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsLanguage[1]( [Ring]Ring.Schema.Models.MetaData ) -> c
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsRelation[1]( [Ring]Ring.Schema.Models.MetaData ) -> D
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsService[1]( [Ring]Ring.Schema.Models.MetaData ) -> d
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsSequence[1]( [Ring]Ring.Schema.Models.MetaData ) -> E
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTablespace[1]( [Ring]Ring.Schema.Models.MetaData ) -> e
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetEntityType[1]( [Ring]Ring.Schema.Models.MetaData ) -> F
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsEnabled[1]( [Ring]Ring.Schema.Models.MetaData ) -> f
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsBaselined[1]( [Ring]Ring.Schema.Models.MetaData ) -> G
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetBaseline[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetEnabled[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> a
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetSequenceCacheId[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> B
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetFieldSize[1]( [Ring]Ring.Schema.Models.MetaData ) -> g
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetFieldType[1]( [Ring]Ring.Schema.Models.MetaData ) -> H
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsFieldNotNull[1]( [Ring]Ring.Schema.Models.MetaData ) -> h
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsFieldCaseSensitif[1]( [Ring]Ring.Schema.Models.MetaData ) -> I
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsFieldMultilingual[1]( [Ring]Ring.Schema.Models.MetaData ) -> i
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetFieldSize[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetFieldNotNull[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> b
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetFieldCaseSensitif[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> C
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetFieldMultilingual[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> c
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsRelationConstraint[1]( [Ring]Ring.Schema.Models.MetaData ) -> J
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsRelationNotNull[1]( [Ring]Ring.Schema.Models.MetaData ) -> j
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetRelationdNotNull[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> D
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetRelationConstraint[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> d
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetRelationType[1]( [Ring]Ring.Schema.Models.MetaData ) -> K
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetRelationType[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetRelationType[2]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Enums.RelationType ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetIndexUnique[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> E
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsIndexUnique[1]( [Ring]Ring.Schema.Models.MetaData ) -> k
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsIndexBitmap[1]( [Ring]Ring.Schema.Models.MetaData ) -> L
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTablespaceTable[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> e
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTablespaceIndex[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> F
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTableSpaceReadonly[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> f
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTablespaceTable[1]( [Ring]Ring.Schema.Models.MetaData ) -> l
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTablespaceIndex[1]( [Ring]Ring.Schema.Models.MetaData ) -> M
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTableSpaceReadonly[1]( [Ring]Ring.Schema.Models.MetaData ) -> m
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetReadonly[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> G
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTableCached[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> g
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTableCacheId[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> H
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetTableCacheId[2]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.CacheId ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTableReadonly[1]( [Ring]Ring.Schema.Models.MetaData ) -> N
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsTableCached[1]( [Ring]Ring.Schema.Models.MetaData ) -> n
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetCacheId[1]( [Ring]Ring.Schema.Models.MetaData ) -> O
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetSchemaAsNative[1]( [Ring]Ring.Schema.Models.MetaData ) -> o
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::SetSchemaAsClfy[1]( [Ring]Ring.Schema.Models.MetaData ) -> P
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsSchemaClfy[1]( [Ring]Ring.Schema.Models.MetaData ) -> p
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::IsSchemaNative[1]( [Ring]Ring.Schema.Models.MetaData ) -> Q
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetSchemaType[1]( [Ring]Ring.Schema.Models.MetaData ) -> q
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetEntityDescription[1]( [Ring]Ring.Schema.Models.MetaData ) -> R
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetEntityName[1]( [Ring]Ring.Schema.Models.MetaData ) -> r
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetEntityDescription[2]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Enums.SchemaLoadType ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetMetaDataList[5]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [System.Runtime]System.Nullable`1<[Ring]Ring.Schema.Enums.EntityType>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32> ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetMetaDataIdList[4]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.EntityType, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::DeleteMetaDataList[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.List ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::ReadFlag[2]( [System.Runtime]System.Int64, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::WriteFlag[3]( [System.Runtime]System.Int64&, [System.Runtime]System.Int32, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetEntityTypeId[0]( ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetFieldTypeId[0]( ) -> a
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetRelationTypeId[0]( ) -> B
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::GetRelationTypeName[0]( ) -> b

	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension::.cctor[0]( ) skipped:  special name

	Ring.Schema.Core.Extensions.models.EntityTypeEnumsId[] [Ring]Ring.Schema.Core.Extensions.models.EntityTypeEnumsId[] Ring.Schema.Core.Extensions.MetaDataExtension::EntityTypeEnumsId -> A
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Core.Extensions.MetaDataExtension::DefaultEntityType -> A
	Ring.Schema.Core.Extensions.models.FieldTypeEnumsId[] [Ring]Ring.Schema.Core.Extensions.models.FieldTypeEnumsId[] Ring.Schema.Core.Extensions.MetaDataExtension::FieldTypeEnumsId -> A
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Core.Extensions.MetaDataExtension::DefaultFieldType -> A
	Ring.Schema.Core.Extensions.models.RelationTypeEnumsId[] [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsId[] Ring.Schema.Core.Extensions.MetaDataExtension::RelationTypeEnumsId -> A
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Core.Extensions.MetaDataExtension::DefaultRelationType -> A
	Ring.Schema.Core.Extensions.models.RelationTypeEnumsName[] [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsName[] Ring.Schema.Core.Extensions.MetaDataExtension::RelationTypeEnumsName -> A
}

[Ring]Ring.Schema.Core.Extensions.RelationExtension -> [Ring]a.J
{
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::GetInverseRelation[1]( [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::GetCurrentTable[1]( [Ring]Ring.Schema.Models.Relation ) -> a
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::Add[1]( [Ring]Ring.Schema.Models.Relation ) -> B
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::Remove[1]( [Ring]Ring.Schema.Models.Relation ) -> b
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::AddConstrainst[1]( [Ring]Ring.Schema.Models.Relation ) -> C
	[Ring]Ring.Schema.Core.Extensions.RelationExtension::GetMtmTable[1]( [Ring]Ring.Schema.Models.Relation ) -> c

	[Ring]Ring.Schema.Core.Extensions.RelationExtension::.cctor[0]( ) skipped:  special name

	Ring.Schema.Builders.MetaDataBuilder [Ring]Ring.Schema.Builders.MetaDataBuilder Ring.Schema.Core.Extensions.RelationExtension::MetaDataBuilder -> A
}

[Ring]Ring.Schema.Core.Extensions.models.EntityTypeEnumsId -> [Ring]a.l
{

	[Ring]Ring.Schema.Core.Extensions.models.EntityTypeEnumsId::.ctor[2]( [System.Runtime]System.SByte, [Ring]Ring.Schema.Enums.EntityType ) skipped:  special name

	System.SByte [Ring]System.SByte Ring.Schema.Core.Extensions.models.EntityTypeEnumsId::Id -> A
	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Core.Extensions.models.EntityTypeEnumsId::EntityType -> A
}

[Ring]Ring.Schema.Core.Extensions.models.FieldTypeEnumsId -> [Ring]a.M
{

	[Ring]Ring.Schema.Core.Extensions.models.FieldTypeEnumsId::.ctor[2]( [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.FieldType ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Core.Extensions.models.FieldTypeEnumsId::Id -> A
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Core.Extensions.models.FieldTypeEnumsId::FieldType -> A
}

[Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsId -> [Ring]a.m
{

	[Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsId::.ctor[2]( [System.Runtime]System.Int64, [Ring]Ring.Schema.Enums.RelationType ) skipped:  special name

	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Extensions.models.RelationTypeEnumsId::Id -> A
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Core.Extensions.models.RelationTypeEnumsId::RelationType -> A
}

[Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsName -> [Ring]a.N
{

	[Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsName::.ctor[2]( [System.Runtime]System.String, [System.Runtime]System.Int64 ) skipped:  special name

	System.String [Ring]System.String Ring.Schema.Core.Extensions.models.RelationTypeEnumsName::Name -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Core.Extensions.models.RelationTypeEnumsName::Id -> A
}

[Ring]Ring.Schema.Builders.Constants -> [Ring]a.n
{
	[Ring]Ring.Schema.Builders.Constants::GetFieldTypeName[0]( ) -> A
	[Ring]Ring.Schema.Builders.Constants::GetCultureInfo[0]( ) -> a

	[Ring]Ring.Schema.Builders.Constants::.cctor[0]( ) skipped:  special name

	System.Char [Ring]System.Char Ring.Schema.Builders.Constants::Underscore -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityName -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityDecription -> a
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityId -> B
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SchemaName -> b
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelationToObject -> C
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityFieldName -> c
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityRelationName -> D
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityIndexName -> d
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntitySchemaName -> E
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityObjectName -> e
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityTableName -> F
	System.String [Ring]System.String Ring.Schema.Builders.Constants::EntityTableSpaceName -> f
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataId -> G
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataName -> g
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataSchemaId -> H
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataDescription -> h
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataRefId -> I
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataObjectType -> i
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataDataType -> J
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataActive -> j
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataModifyStmp -> K
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataFlags -> k
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDataValue -> L
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogId -> l
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogEntryTime -> M
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogJobId -> m
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaSchemaId -> N
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogLevel -> n
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogThreadId -> O
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogCallSite -> o
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogMethod -> P
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogLineNumber -> p
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogMessage -> Q
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogDescription -> q
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconGuid -> R
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconTableId -> r
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconToFieldId -> S
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconFromFieldId -> s
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconRelationId -> T
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconRelationValue -> t
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconItemLexiId -> U
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconItemRefId -> u
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconItemValue -> V
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserSchemaId -> v
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserLoginName -> W
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserEmail -> w
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserActive -> X
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserFieldPswrd -> x
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PrimaryKeyDescription -> Y
	System.String [Ring]System.String Ring.Schema.Builders.Constants::ClfyPrimaryKeyObj -> y
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::NotDefinedFieldTypeId -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::DefaultSchema -> Z
	System.String [Ring]System.String Ring.Schema.Builders.Constants::DefaultRefId -> z
	System.String [Ring]System.String Ring.Schema.Builders.Constants::DefaultIdValue -> aA
	Ring.Schema.Models.MetaData [Ring]Ring.Schema.Models.MetaData Ring.Schema.Builders.Constants::NullMetada -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MtmPrefix -> aa
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MtmSeperator -> aB
	System.Char [Ring]System.Char Ring.Schema.Builders.Constants::MtmPaddingChar -> a
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::TableIdNotFound -> a
	System.String [Ring]System.String Ring.Schema.Builders.Constants::ReferenceIdNotFound -> ab
	System.String [Ring]System.String Ring.Schema.Builders.Constants::DefaultSchemaName -> aC
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::DefaultSchemaPort -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::DefaultMetaSchemaId -> b
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultFlags -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::FieldNameNotFound -> C
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SchemaConnString -> ac
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SchemaDefaultPort -> aD
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SchemaSearchPath -> ad
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SchemaDefaultLanguage -> aE
	System.String [Ring]System.String Ring.Schema.Builders.Constants::TableNameClfySubject -> ae
	System.String [Ring]System.String Ring.Schema.Builders.Constants::TableNameReadonly -> aF
	System.String [Ring]System.String Ring.Schema.Builders.Constants::TableSpaceFile -> af
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameTypeId -> aG
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDataType -> ag
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDataTypeDesc -> aH
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameSize -> ah
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldDataTypeArray -> aI
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameNotNull -> ai
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameCaseInsensitif -> aJ
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameBaseLine -> aj
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldDefaultValue -> aK
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldDescription -> ak
	System.String [Ring]System.String Ring.Schema.Builders.Constants::IndexUnique -> aL
	System.String [Ring]System.String Ring.Schema.Builders.Constants::IndexFieldDefault -> al
	System.String [Ring]System.String Ring.Schema.Builders.Constants::IndexFieldDefinition -> aM
	System.Char [Ring]System.Char Ring.Schema.Builders.Constants::IndexFieldSeparator -> B
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDefaultSize -> am
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDefaultDataType -> aN
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldCaseSensitif -> an
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldMultilingual -> aO
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDefaultCaseSensitif -> ao
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNotNull -> aP
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FieldNameDefaultNotNull -> ap
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameRelationType -> aQ
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameToTable -> aq
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameDefaultExclRelation -> aR
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameDefaultInverseRelation -> ar
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameInverseRelation -> aS
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNotNull -> as
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelContraint -> aT
	System.String [Ring]System.String Ring.Schema.Builders.Constants::RelNameDefaultRelationType -> at
	Ring.Schema.Core.Rules.IValidationRule`1<Ring.Schema.Models.MetaData>[] [Ring]Ring.Schema.Core.Rules.IValidationRule`1<Ring.Schema.Models.MetaData>[] Ring.Schema.Builders.Constants::MetadaValidators -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaTableName -> aU
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconTableName -> au
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconItemTableName -> aV
	System.String [Ring]System.String Ring.Schema.Builders.Constants::LexiconItemPhysTableName -> av
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Ring]System.Collections.Generic.Dictionary`2<System.String,System.Int32> Ring.Schema.Builders.Constants::FieldTypeEnumsName -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Builders.Constants::DefaultPrimaryKey -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Builders.Constants::DefaultShortPrimaryKey -> a
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Builders.Constants::DefaultIntPrimaryKey -> B
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Builders.Constants::DefaultClflyPrimaryKey -> b
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultJobIdValue -> a
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceJobIdName -> aW
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceJobIdDesc -> aw
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultLexiconIdValue -> B
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceLexiconIdName -> aX
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceLexiconIdDesc -> ax
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultLanguageIdValue -> b
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceLanguageIdName -> aY
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceLanguageIdDesc -> ay
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultUserIdValue -> C
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceUserIdName -> aZ
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceUserIdDesc -> az
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::SequenceReservedRangeValue -> c
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultIndexIdValue -> c
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceIndexIdName -> BA
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceIndexIdDesc -> Ba
	System.Int64 [Ring]System.Int64 Ring.Schema.Builders.Constants::DefaultEventIdValue -> D
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceEventIdName -> BB
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SequenceEventIdDesc -> Bb
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaTableIdName -> BC
	System.String [Ring]System.String Ring.Schema.Builders.Constants::UserTableName -> Bc
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDictionary -> BD
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDictionaryTableSpace -> Bd
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaDictionarySchema -> BE
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaLogTableName -> Be
	System.Char [Ring]System.Char Ring.Schema.Builders.Constants::TableNameSperator -> b
	System.Char[] [Ring]System.Char[] Ring.Schema.Builders.Constants::TrimSeparatorList -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::MetaPhysicalTableNameSperator -> BF
	System.String [Ring]System.String Ring.Schema.Builders.Constants::CommonPhysicalTableNameSperator -> Bf
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionary -> BG
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionaryName -> Bg
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionaryType -> BH
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionaryTblName -> Bh
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionaryRootPage -> BI
	System.String [Ring]System.String Ring.Schema.Builders.Constants::SqliteDictionarySql -> Bi
	System.String [Ring]System.String Ring.Schema.Builders.Constants::OracleDictionary -> BJ
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionary -> Bj
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionaryTableSpace -> BK
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionarySchema -> Bk
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionaryName -> BL
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionaryTableSpaceName -> Bl
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionarySchemaNameField -> BM
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionarySchemaName -> Bm
	System.String [Ring]System.String Ring.Schema.Builders.Constants::PostgreDictionaryOwner -> BN
	System.String [Ring]System.String Ring.Schema.Builders.Constants::FakeRecordFieldValue -> Bn
	Ring.Schema.Models.LexiconIndex[] [Ring]Ring.Schema.Models.LexiconIndex[] Ring.Schema.Builders.Constants::DefaultLexiconIndexes -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Builders.Constants::MaxSizeObjectName -> D
	Ring.Schema.Models.CacheId [Ring]Ring.Schema.Models.CacheId Ring.Schema.Builders.Constants::MtmCacheId -> A
	System.String [Ring]System.String Ring.Schema.Builders.Constants::TablePrefixClfy -> BO
	System.String [Ring]System.String Ring.Schema.Builders.Constants::TablePrefixDefault -> Bo
	System.Char [Ring]System.Char Ring.Schema.Builders.Constants::LexiconNameSperator -> C
	System.String [Ring]System.String Ring.Schema.Builders.Constants::DefaultLanguage -> BP
	System.Globalization.CultureInfo [Ring]System.Globalization.CultureInfo Ring.Schema.Builders.Constants::DefaultCultureInfo -> A
	System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> [Ring]System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> Ring.Schema.Builders.Constants::Cultures -> A
}

[Ring]Ring.Data.Constants -> [Ring]a.P
{
	[Ring]Ring.Data.Constants::GetListTypeName[0]( ) -> A

	[Ring]Ring.Data.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidIndex -> A
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidPageSize -> a
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidPageNumber -> B
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidNumber -> b
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidDate -> C
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidList -> c
	System.String [Ring]System.String Ring.Data.Constants::ErrIndexAlreadyExist -> D
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidListType -> d
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidOperation -> E
	System.String [Ring]System.String Ring.Data.Constants::ErrCriteriaListEmpty -> e
	System.String [Ring]System.String Ring.Data.Constants::ErrParentEntryIndex -> F
	System.String [Ring]System.String Ring.Data.Constants::ErrTraverseFromRoot -> f
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidSchemaName -> G
	System.String [Ring]System.String Ring.Data.Constants::ErrUnknowFieldName -> g
	System.String [Ring]System.String Ring.Data.Constants::ErrUnknowRecordType -> H
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidArgumentField -> h
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidObject -> I
	System.String [Ring]System.String Ring.Data.Constants::ErrUnknowRelName -> i
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidDateField -> J
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidIntField -> j
	System.String [Ring]System.String Ring.Data.Constants::DisplayObject -> K
	System.String [Ring]System.String Ring.Data.Constants::FieldIndent -> k
	System.String [Ring]System.String Ring.Data.Constants::DefaultDisplaySpace -> L
	System.String [Ring]System.String Ring.Data.Constants::DefaultDisplayString -> l
	System.String [Ring]System.String Ring.Data.Constants::DefaultDisplayDate -> M
	System.String [Ring]System.String Ring.Data.Constants::DefaultDisplayNumber -> m
	System.String [Ring]System.String Ring.Data.Constants::DisplayStringSeparator -> N
	System.Char [Ring]System.Char Ring.Data.Constants::DisplayDatePadding -> A
	System.Char [Ring]System.Char Ring.Data.Constants::DisplayDateSeparator -> a
	System.Char [Ring]System.Char Ring.Data.Constants::DisplayTimeSeparator -> B
	System.String [Ring]System.String Ring.Data.Constants::BooleanTrue -> n
	System.String [Ring]System.String Ring.Data.Constants::BooleanFalse -> O
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatYear -> o
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatMonth -> P
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatDay -> p
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatHour -> Q
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatMinute -> q
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatSecond -> R
	System.String [Ring]System.String Ring.Data.Constants::RcdFormatMilliSecond -> r
	System.Char [Ring]System.Char Ring.Data.Constants::RcdTimeSeperator -> b
	System.Char [Ring]System.Char Ring.Data.Constants::RcdHourSeperator -> C
	System.Char [Ring]System.Char Ring.Data.Constants::RcdMilliSecondSeperator -> c
	System.Char [Ring]System.Char Ring.Data.Constants::RcdDateSeperator -> D
	System.Char [Ring]System.Char Ring.Data.Constants::RcdTimeZoneInfo -> d
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::FieldNameNotFound -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::RelationNameNotFound -> a
	System.String [Ring]System.String Ring.Data.Constants::RcdDefaultId -> S
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::RcdDefaultShiftLeft -> B
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::Mask64Bits -> b
	System.String [Ring]System.String Ring.Data.Constants::ErrPathInvalidFocusType -> s
	System.String [Ring]System.String Ring.Data.Constants::ErrPathInvalidSchemaId -> T
	System.String [Ring]System.String Ring.Data.Constants::ErrPathInvalidRelationName -> t
	System.String [Ring]System.String Ring.Data.Constants::ErrPathInvalidFieldName -> U
	System.String [Ring]System.String Ring.Data.Constants::RootKey -> u
	System.Char [Ring]System.Char Ring.Data.Constants::PathSeparator -> E
	System.String [Ring]System.String Ring.Data.Constants::FocusObject -> V
	System.String [Ring]System.String Ring.Data.Constants::TimeBombTableName -> v
	System.String [Ring]System.String Ring.Data.Constants::TimeBombReference -> W
	Ring.Data.Models.PathEvaluatorResult [Ring]Ring.Data.Models.PathEvaluatorResult Ring.Data.Constants::DefaultPathEvaluatorResult -> A
	System.String [Ring]System.String Ring.Data.Constants::LastFloatDigit -> w
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::LastFloatDigitLen -> C
	System.String [Ring]System.String Ring.Data.Constants::BulksErrorMsg -> X
	System.String [Ring]System.String Ring.Data.Constants::BulksReadOnlyErrorMsg -> x
	System.String [Ring]System.String Ring.Data.Constants::BulksErrUnknowRecordType -> Y
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Constants::FakeStringTable -> A
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Constants::FakeLongTable -> a
	System.String [Ring]System.String Ring.Data.Constants::DefaultFieldName -> y
	System.String [Ring]System.String Ring.Data.Constants::ErrInvalidType -> Z
	System.String [Ring]System.String Ring.Data.Constants::ErrMethodNotSupported -> z
	System.String [Ring]System.String Ring.Data.Constants::ErrOutOfRange -> aA
	System.String [Ring]System.String Ring.Data.Constants::ErrReplaceInvalidType -> aa
	System.String [Ring]System.String Ring.Data.Constants::ErrAppendInvalidType -> aB
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::CommandLineTimeOut -> c
	System.Int32 [Ring]System.Int32 Ring.Data.Constants::ItemNotFound -> D
	System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Enums.ItemType> [Ring]System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Enums.ItemType> Ring.Data.Constants::ListTypeEnumsName -> A
	System.String [Ring]System.String Ring.Data.Constants::Iso8601Format -> ab
	System.String [Ring]System.String Ring.Data.Constants::InfoStartImport -> aC
	System.String [Ring]System.String Ring.Data.Constants::WarnSchemaNotExistsDesc -> ac
	System.String [Ring]System.String Ring.Data.Constants::InfoStartImportDesc -> aD
	System.String [Ring]System.String Ring.Data.Constants::InfoEndImport -> ad
	System.String [Ring]System.String Ring.Data.Constants::InfoEndImportDesc -> aE
	System.String [Ring]System.String Ring.Data.Constants::LexiconItemLexiId -> ae
	System.String [Ring]System.String Ring.Data.Constants::WarnMsgMissingValue -> aF
	System.String [Ring]System.String Ring.Data.Constants::WarnMsgMissingFieldDesc -> af
	System.String [Ring]System.String Ring.Data.Constants::WarnMsgMissingReldDesc -> aG
	System.String [Ring]System.String Ring.Data.Constants::Digit2Format -> ag
	System.String [Ring]System.String Ring.Data.Constants::Digit4Format -> aH
	System.String [Ring]System.String Ring.Data.Constants::DateFormat -> ah
	System.DateTime [Ring]System.DateTime Ring.Data.Constants::BaseDate -> A
}

[Ring]Ring.Data.Models.BulkRetrieveFilter -> [Ring]a.p
{

	[Ring]Ring.Data.Models.BulkRetrieveFilter::.ctor[4]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.OperationType, [System.Runtime]System.String, [System.Runtime]System.Boolean ) skipped:  special name
	[Ring]Ring.Data.Models.BulkRetrieveFilter::.ctor[3]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.OperationType, [System.Runtime]System.String[] ) skipped:  special name

	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Data.Models.BulkRetrieveFilter::Field -> A
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.Models.BulkRetrieveFilter::Operation -> A
	System.String [Ring]System.String Ring.Data.Models.BulkRetrieveFilter::Operand -> A
	System.String[] [Ring]System.String[] Ring.Data.Models.BulkRetrieveFilter::Operands -> A
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkRetrieveFilter::CaseSensitiveSearch -> A
}

[Ring]Ring.Data.Models.BulkRetrieveQuery -> [Ring]a.Q
{

	[Ring]Ring.Data.Models.BulkRetrieveQuery::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.Models.BulkRetrieveQuery::.ctor[2]( [Ring]Ring.Data.Enums.BulkQueryType, [Ring]Ring.Schema.Models.Table ) skipped:  special name
	[Ring]Ring.Data.Models.BulkRetrieveQuery::.ctor[4]( [Ring]Ring.Data.Enums.BulkQueryType, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Data.Models.BulkRetrieveQuery, [Ring]Ring.Schema.Models.Relation ) skipped:  special name

	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Models.BulkRetrieveQuery::TargetObject -> A
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Models.BulkRetrieveQuery::Type -> A
	System.Collections.Generic.List`1<Ring.Data.Models.BulkRetrieveFilter> [Ring]System.Collections.Generic.List`1<Ring.Data.Models.BulkRetrieveFilter> Ring.Data.Models.BulkRetrieveQuery::Filters -> A
	System.Collections.Generic.List`1<Ring.Data.Models.BulkSort> [Ring]System.Collections.Generic.List`1<Ring.Data.Models.BulkSort> Ring.Data.Models.BulkRetrieveQuery::Sorts -> A
	Ring.Data.List [Ring]Ring.Data.List Ring.Data.Models.BulkRetrieveQuery::Result -> A
	System.Collections.Generic.List`1<Ring.Schema.Models.Relation> [Ring]System.Collections.Generic.List`1<Ring.Schema.Models.Relation> Ring.Data.Models.BulkRetrieveQuery::ForeignKeys -> A
	Ring.Schema.Models.Relation [Ring]Ring.Schema.Models.Relation Ring.Data.Models.BulkRetrieveQuery::Relation -> A
	Ring.Data.Models.BulkRetrieveQuery [Ring]Ring.Data.Models.BulkRetrieveQuery Ring.Data.Models.BulkRetrieveQuery::ParentQuery -> A
	System.TimeSpan [Ring]System.TimeSpan Ring.Data.Models.BulkRetrieveQuery::ExecutionTime -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Models.BulkRetrieveQuery::PageSize -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Models.BulkRetrieveQuery::PageNumber -> a
	System.Int32 [Ring]System.Int32 Ring.Data.Models.BulkRetrieveQuery::ItemCount -> B
	System.Int32 [Ring]System.Int32 Ring.Data.Models.BulkRetrieveQuery::PartitionSize -> b
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkRetrieveQuery::UniqueFilter -> A
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkRetrieveQuery::Launched -> a
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkRetrieveQuery::SubQuery -> B
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkRetrieveQuery::MultipleQuery -> b
	Ring.Data.IDbCommand [Ring]Ring.Data.IDbCommand Ring.Data.Models.BulkRetrieveQuery::Sql -> A
	System.Int64[] [Ring]System.Int64[] Ring.Data.Models.BulkRetrieveQuery::Parameters -> A
}

[Ring]Ring.Data.Models.BulkSaveQuery -> [Ring]a.q
{

	[Ring]Ring.Data.Models.BulkSaveQuery::.ctor[5]( [Ring]Ring.Data.Models.BulkSaveQuery, [Ring]Ring.Data.Enums.BulkSaveType, [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) skipped:  special name

	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Models.BulkSaveQuery::Type -> A
	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.Models.BulkSaveQuery::CurrentRecord -> A
	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.Models.BulkSaveQuery::RefRecord -> a
	Ring.Data.Models.BulkSaveQuery [Ring]Ring.Data.Models.BulkSaveQuery Ring.Data.Models.BulkSaveQuery::ParentQuery -> A
	Ring.Schema.Models.Relation [Ring]Ring.Schema.Models.Relation Ring.Data.Models.BulkSaveQuery::Relation -> A
	System.Boolean [Ring]System.Boolean Ring.Data.Models.BulkSaveQuery::Cancelled -> A
}

[Ring]Ring.Data.Models.BulkSort -> [Ring]a.R
{

	[Ring]Ring.Data.Models.BulkSort::.ctor[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.Enums.SortOrderType ) skipped:  special name

	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Data.Models.BulkSort::Field -> A
	Ring.Data.Enums.SortOrderType [Ring]Ring.Data.Enums.SortOrderType Ring.Data.Models.BulkSort::Type -> A
}

[Ring]Ring.Data.Models.Logger -> [Ring]a.r
{

	[Ring]Ring.Data.Models.Logger::.ctor[1]( [System.Runtime]System.Type ) skipped:  special name

	System.Type [Ring]System.Type Ring.Data.Models.Logger::Type -> A
	System.Diagnostics.StackTrace [Ring]System.Diagnostics.StackTrace Ring.Data.Models.Logger::StackTrace -> A
}

[Ring]Ring.Data.Models.PathEvaluatorFilter -> [Ring]a.S
{

	[Ring]Ring.Data.Models.PathEvaluatorFilter::.ctor[3]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.OperationType, [System.Runtime]System.String ) skipped:  special name

	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Data.Models.PathEvaluatorFilter::Field -> A
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.Models.PathEvaluatorFilter::Operation -> A
	System.String [Ring]System.String Ring.Data.Models.PathEvaluatorFilter::Operand -> A
}

[Ring]Ring.Data.Models.PathEvaluatorQuery -> [Ring]a.s
{
	[Ring]Ring.Data.Models.PathEvaluatorQuery::get_Result[0]( ) -> A
	[Ring]Ring.Data.Models.PathEvaluatorQuery::set_Result[1]( [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.Models.PathEvaluatorQuery::get_ParentQuery[0]( ) -> a
	[Ring]Ring.Data.Models.PathEvaluatorQuery::set_ParentQuery[1]( [Ring]Ring.Data.Models.PathEvaluatorQuery ) -> A
	[Ring]Ring.Data.Models.PathEvaluatorQuery::get_ParentPath[0]( ) -> B
	[Ring]Ring.Data.Models.PathEvaluatorQuery::set_ParentPath[1]( [System.Runtime]System.String ) -> A

	[Ring]Ring.Data.Models.PathEvaluatorQuery::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.Models.PathEvaluatorQuery::.ctor[0]( ) skipped:  special name

	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.Models.PathEvaluatorQuery::_result -> A
	Ring.Data.Models.PathEvaluatorQuery [Ring]Ring.Data.Models.PathEvaluatorQuery Ring.Data.Models.PathEvaluatorQuery::_parentQuery -> A
	Ring.Schema.Models.Relation [Ring]Ring.Schema.Models.Relation Ring.Data.Models.PathEvaluatorQuery::FromRelation -> A
	System.Collections.Generic.List`1<Ring.Schema.Models.Field> [Ring]System.Collections.Generic.List`1<Ring.Schema.Models.Field> Ring.Data.Models.PathEvaluatorQuery::Fields -> A
	System.Collections.Generic.List`1<Ring.Schema.Models.Relation> [Ring]System.Collections.Generic.List`1<Ring.Schema.Models.Relation> Ring.Data.Models.PathEvaluatorQuery::Relations -> A
	System.Collections.Generic.List`1<Ring.Data.Models.PathEvaluatorFilter> [Ring]System.Collections.Generic.List`1<Ring.Data.Models.PathEvaluatorFilter> Ring.Data.Models.PathEvaluatorQuery::Filters -> A
	Ring.Data.IDbCommand [Ring]Ring.Data.IDbCommand Ring.Data.Models.PathEvaluatorQuery::Sql -> A
	System.String [Ring]System.String Ring.Data.Models.PathEvaluatorQuery::_parentPath -> A

	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.Models.PathEvaluatorQuery::Result -> dropped
	Ring.Data.Models.PathEvaluatorQuery [Ring]Ring.Data.Models.PathEvaluatorQuery Ring.Data.Models.PathEvaluatorQuery::ParentQuery -> dropped
	System.String [Ring]System.String Ring.Data.Models.PathEvaluatorQuery::ParentPath -> dropped
}

[Ring]Ring.Data.Models.PathEvaluatorResult -> [Ring]a.T
{

	[Ring]Ring.Data.Models.PathEvaluatorResult::.ctor[2]( [Ring]Ring.Schema.Enums.FieldType, [System.Runtime]System.String ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Models.PathEvaluatorResult::Value -> A
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Data.Models.PathEvaluatorResult::Type -> A
}

[Ring]Ring.Data.Mappers.Constants -> [Ring]a.t
{

	[Ring]Ring.Data.Mappers.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataId -> A
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataName -> a
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataSchemaId -> B
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataDescription -> b
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataRefId -> C
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataObjectType -> c
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataDataType -> D
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataActive -> d
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataFlags -> E
	System.String [Ring]System.String Ring.Data.Mappers.Constants::MetaDataValue -> e
}

[Ring]Ring.Data.Helpers.Constants -> [Ring]a.V
{

	[Ring]Ring.Data.Helpers.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Helpers.Constants::Select -> A
	System.String [Ring]System.String Ring.Data.Helpers.Constants::From -> a
	System.String [Ring]System.String Ring.Data.Helpers.Constants::Where -> B
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::Space -> A
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::SelectSeparator -> a
	System.String [Ring]System.String Ring.Data.Helpers.Constants::And -> b
	System.String [Ring]System.String Ring.Data.Helpers.Constants::OrderBy -> C
	System.String [Ring]System.String Ring.Data.Helpers.Constants::OrderByDesc -> c
	System.String [Ring]System.String Ring.Data.Helpers.Constants::OrderByAsc -> D
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::StartParenthesis -> B
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::EndParenthesis -> b
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::BindVariablePrefix -> C
	System.Char [Ring]System.Char Ring.Data.Helpers.Constants::BindVariableName -> c
	System.String [Ring]System.String Ring.Data.Helpers.Constants::FirstBindVariableName -> d
	System.String [Ring]System.String Ring.Data.Helpers.Constants::SecondBindVariableName -> E
	System.String [Ring]System.String Ring.Data.Helpers.Constants::ThirdBindVariableName -> e
	System.String [Ring]System.String Ring.Data.Helpers.Constants::FourthBindVariableName -> F
	System.String [Ring]System.String Ring.Data.Helpers.Constants::FifthBindVariableName -> f
	System.String [Ring]System.String Ring.Data.Helpers.Constants::NullOperand -> G
	System.String [Ring]System.String Ring.Data.Helpers.Constants::SqliteRowid -> g
	System.String [Ring]System.String Ring.Data.Helpers.Constants::PostgreRowid -> H
	System.String [Ring]System.String Ring.Data.Helpers.Constants::Equal -> h
	System.String [Ring]System.String Ring.Data.Helpers.Constants::IsOpp -> I
	System.String [Ring]System.String Ring.Data.Helpers.Constants::NotEqual -> i
	System.String [Ring]System.String Ring.Data.Helpers.Constants::Greater -> J
	System.String [Ring]System.String Ring.Data.Helpers.Constants::GreaterOrEqual -> j
	System.String [Ring]System.String Ring.Data.Helpers.Constants::Less -> K
	System.String [Ring]System.String Ring.Data.Helpers.Constants::LessOrEqual -> k
	System.String [Ring]System.String Ring.Data.Helpers.Constants::Like -> L
	System.String [Ring]System.String Ring.Data.Helpers.Constants::NotLike -> l
	System.String [Ring]System.String Ring.Data.Helpers.Constants::In -> M
	System.String [Ring]System.String Ring.Data.Helpers.Constants::NotIn -> m
	System.String [Ring]System.String Ring.Data.Helpers.Constants::NullRelation -> N
	System.Int32 [Ring]System.Int32 Ring.Data.Helpers.Constants::MaxInElement -> A
	System.String [Ring]System.String Ring.Data.Helpers.Constants::ErrUnknowRecordType -> n
	Ring.Data.IDbParameter[] [Ring]Ring.Data.IDbParameter[] Ring.Data.Helpers.Constants::DefaultFilters -> A
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataIdWhere -> O
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataWhere -> o
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataSet -> P
	System.String [Ring]System.String Ring.Data.Helpers.Constants::LeviconItemWhere -> p
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataIdSetField -> Q
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataIdSet -> q
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DefaultSqlFullScan -> R
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteBaseQuery -> r
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteQuery -> S
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteMtmQuery -> s
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteMetaIdQuery -> T
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteMetaQuery -> t
	System.String [Ring]System.String Ring.Data.Helpers.Constants::DeleteLexiconItemQuery -> U
	System.String [Ring]System.String Ring.Data.Helpers.Constants::InsertQuery -> u
	System.String [Ring]System.String Ring.Data.Helpers.Constants::UpdateQuery -> V
	System.String [Ring]System.String Ring.Data.Helpers.Constants::UpdateQueryWithReturning -> v
	System.String [Ring]System.String Ring.Data.Helpers.Constants::PageSizeLite -> W
	System.String [Ring]System.String Ring.Data.Helpers.Constants::LexiconItemLexiId -> w
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataId -> X
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataSchemaId -> x
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataObjectType -> Y
	System.String [Ring]System.String Ring.Data.Helpers.Constants::MetaDataRefId -> y
}

[Ring]Ring.Data.Enums.BulkQueryType -> [Ring]a.W
{
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Enums.BulkQueryType::Undefined -> A
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Enums.BulkQueryType::SimpleQuery -> a
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Enums.BulkQueryType::SetRoot -> B
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Enums.BulkQueryType::TraverseFromParent -> b
	Ring.Data.Enums.BulkQueryType [Ring]Ring.Data.Enums.BulkQueryType Ring.Data.Enums.BulkQueryType::TraverseFromRoot -> C

	System.Byte [Ring]System.Byte Ring.Data.Enums.BulkQueryType::value__ skipped:  special name
}

[Ring]Ring.Data.Enums.BulkSaveType -> [Ring]a.w
{
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::DeleteRecord -> A
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::InsertRecord -> a
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::UpdateRecord -> B
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::RelateRecords -> b
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::BindRelation -> C
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::InsertMtm -> c
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::InsertMtmIfNotExist -> D
	Ring.Data.Enums.BulkSaveType [Ring]Ring.Data.Enums.BulkSaveType Ring.Data.Enums.BulkSaveType::Unknown -> d

	System.Byte [Ring]System.Byte Ring.Data.Enums.BulkSaveType::value__ skipped:  special name
}

[Ring]Ring.Data.Enums.ItemType -> [Ring]a.X
{
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Long -> A
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Integer -> a
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Float -> B
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Double -> b
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::String -> C
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Record -> c
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::Variant -> D
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.Enums.ItemType::NotDefined -> d

	System.Int32 [Ring]System.Int32 Ring.Data.Enums.ItemType::value__ skipped:  special name
}

[Ring]Ring.Data.Enums.JobType -> [Ring]a.x
{
	Ring.Data.Enums.JobType [Ring]Ring.Data.Enums.JobType Ring.Data.Enums.JobType::Upgrade -> A
	Ring.Data.Enums.JobType [Ring]Ring.Data.Enums.JobType Ring.Data.Enums.JobType::Loading -> a

	System.Byte [Ring]System.Byte Ring.Data.Enums.JobType::value__ skipped:  special name
}

[Ring]Ring.Data.Core.ConnectionPool -> [Ring]a.Y
{
	[Ring]Ring.Data.Core.ConnectionPool::get_ConnectionCount[0]( ) -> A
	[Ring]Ring.Data.Core.ConnectionPool::Get[0]( ) -> a
	[Ring]Ring.Data.Core.ConnectionPool::Put[1]( [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.Core.ConnectionPool::SanityCheck[0]( ) -> B
	[Ring]Ring.Data.Core.ConnectionPool::CreateConnection[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.Core.ConnectionPool::DestroyConnection[1]( [Ring]Ring.Data.IDbConnection ) -> a

	[Ring]Ring.Data.Core.ConnectionPool::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.Core.ConnectionPool::Finalize[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.Core.ConnectionPool::.ctor[3]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [Ring]Ring.Data.IDbConnection ) skipped:  special name
	[Ring]Ring.Data.Core.ConnectionPool::.cctor[0]( ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_currrentPoolId -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_lastIndex -> a
	Ring.Data.IDbConnection[] [Ring]Ring.Data.IDbConnection[] Ring.Data.Core.ConnectionPool::_bucket -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_creationCount -> B
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_destroyCount -> b
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_cursor -> C
	System.UInt16 [Ring]System.UInt16 Ring.Data.Core.ConnectionPool::_requestCount -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::_swapIndex -> c
	System.Boolean [Ring]System.Boolean Ring.Data.Core.ConnectionPool::_disposed -> A
	Ring.Data.IDbConnection [Ring]Ring.Data.IDbConnection Ring.Data.Core.ConnectionPool::ConnectionRef -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::PoolId -> D
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::MaxSize -> d
	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::MinSize -> E

	System.Int32 [Ring]System.Int32 Ring.Data.Core.ConnectionPool::ConnectionCount -> dropped
}

[Ring]Ring.Data.Core.Constants -> [Ring]a.y
{

	[Ring]Ring.Data.Core.Constants::.cctor[0]( ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Data.Core.Constants::DefaultMetaSchemaId -> A
	System.String [Ring]System.String Ring.Data.Core.Constants::ArgObjectPoolExceptionName -> A
	System.String [Ring]System.String Ring.Data.Core.Constants::ArgObjectPoolExceptionMsg -> a
	System.String [Ring]System.String Ring.Data.Core.Constants::MetaDataEnabled -> B
	System.Int32 [Ring]System.Int32 Ring.Data.Core.Constants::BaseConnectionId -> a
	System.Int32 [Ring]System.Int32 Ring.Data.Core.Constants::DefaultPoolId -> B
	System.String [Ring]System.String Ring.Data.Core.Constants::MetaDataSchemaId -> b
	System.String [Ring]System.String Ring.Data.Core.Constants::MetaDataId -> C
	System.String [Ring]System.String Ring.Data.Core.Constants::MetaDataValue -> c
	System.String [Ring]System.String Ring.Data.Core.Constants::MetaDataObjectType -> D
	System.String [Ring]System.String Ring.Data.Core.Constants::LexiconItemLexiId -> d
	System.String [Ring]System.String Ring.Data.Core.Constants::SqlitePragma -> E
	System.String [Ring]System.String Ring.Data.Core.Constants::SqlitePragmaCaseSensitif -> e
	System.String [Ring]System.String Ring.Data.Core.Constants::SqlitePragmaJournalMode -> F
	System.String [Ring]System.String Ring.Data.Core.Constants::MsgLoggerInitialized -> f
	System.String [Ring]System.String Ring.Data.Core.Constants::MsgSchemaLoaded -> G
	System.String [Ring]System.String Ring.Data.Core.Constants::MsgSchemaLoadedDesc -> g
	System.String[] [Ring]System.String[] Ring.Data.Core.Constants::SqlitePragmaList -> A
}

[Ring]Ring.Data.Core.DatabaseCollection -> [Ring]a.Z
{
	[Ring]Ring.Data.Core.DatabaseCollection::get_UpgradeJobId[0]( ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::get_SchemaCount[0]( ) -> a
	[Ring]Ring.Data.Core.DatabaseCollection::get_DefaultSchema[0]( ) -> B
	[Ring]Ring.Data.Core.DatabaseCollection::get_MetaSchema[0]( ) -> b
	[Ring]Ring.Data.Core.DatabaseCollection::get_PendingSchema[0]( ) -> C
	[Ring]Ring.Data.Core.DatabaseCollection::get_MetaDataTable[0]( ) -> c
	[Ring]Ring.Data.Core.DatabaseCollection::get_MetaDataIdTable[0]( ) -> D
	[Ring]Ring.Data.Core.DatabaseCollection::get_LexiconTable[0]( ) -> d
	[Ring]Ring.Data.Core.DatabaseCollection::get_UserTable[0]( ) -> E
	[Ring]Ring.Data.Core.DatabaseCollection::get_LogTable[0]( ) -> e
	[Ring]Ring.Data.Core.DatabaseCollection::get_Status[0]( ) -> F
	[Ring]Ring.Data.Core.DatabaseCollection::get_Item[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::Add[1]( [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::Add[1]( [Ring]Ring.Schema.Models.Lexicon[] ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::GetSchema[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::GetSchema[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.Core.DatabaseCollection::SetStatus[1]( [Ring]Ring.Schema.Enums.DatabaseCollectionStatus ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::SetPendingSchema[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::GetSchemaId[0]( ) -> f
	[Ring]Ring.Data.Core.DatabaseCollection::LoadSchema[2]( [System.Runtime]System.Int64, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::GenerateNewJobId[1]( [Ring]Ring.Data.Enums.JobType ) -> A
	[Ring]Ring.Data.Core.DatabaseCollection::Add[1]( [Ring]Ring.Schema.Models.Schema ) -> a
	[Ring]Ring.Data.Core.DatabaseCollection::GetSchemaList[0]( ) -> G
	[Ring]Ring.Data.Core.DatabaseCollection::LoadLexicons[1]( [Ring]Ring.Schema.Models.Schema ) -> B

	[Ring]Ring.Data.Core.DatabaseCollection::.ctor[0]( ) skipped:  special name

	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::_defaultSchema -> A
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::_metaSchema -> a
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::_pendingSchema -> B
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Data.Core.DatabaseCollection::_status -> A
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_metaDataTable -> A
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_metaDataIdTable -> a
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_lexiconTable -> B
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_lexiconItemTable -> b
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_logTable -> C
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::_userTable -> c
	Ring.Schema.Models.Schema[] [Ring]Ring.Schema.Models.Schema[] Ring.Data.Core.DatabaseCollection::_schemaList -> A
	Ring.Data.Models.Logger [Ring]Ring.Data.Models.Logger Ring.Data.Core.DatabaseCollection::_log -> A
	Ring.Schema.Builders.SchemaBuilder [Ring]Ring.Schema.Builders.SchemaBuilder Ring.Data.Core.DatabaseCollection::_schemaBuilder -> A
	Ring.Schema.Builders.MetaDataBuilder [Ring]Ring.Schema.Builders.MetaDataBuilder Ring.Data.Core.DatabaseCollection::_metaDataBuilder -> A
	Ring.Schema.Builders.LexiconBuilder [Ring]Ring.Schema.Builders.LexiconBuilder Ring.Data.Core.DatabaseCollection::_lexiconBuilder -> A
	System.Int64 [Ring]System.Int64 Ring.Data.Core.DatabaseCollection::_upgradeJobId -> A

	System.Int64 [Ring]System.Int64 Ring.Data.Core.DatabaseCollection::UpgradeJobId -> dropped
	System.Int32 [Ring]System.Int32 Ring.Data.Core.DatabaseCollection::SchemaCount -> dropped
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::DefaultSchema -> dropped
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::MetaSchema -> dropped
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Core.DatabaseCollection::PendingSchema -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::MetaDataTable -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::MetaDataIdTable -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::LexiconTable -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::UserTable -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::LogTable -> dropped
	Ring.Schema.Enums.DatabaseCollectionStatus [Ring]Ring.Schema.Enums.DatabaseCollectionStatus Ring.Data.Core.DatabaseCollection::Status -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Core.DatabaseCollection::Item -> dropped
}

[Ring]Ring.Data.Core.Global -> [Ring]a.z
{
	[Ring]Ring.Data.Core.Global::LoadGlobalSequences[0]( ) -> A
	[Ring]Ring.Data.Core.Global::LoadSchemaCollection[0]( ) -> a

	[Ring]Ring.Data.Core.Global::.cctor[0]( ) skipped:  special name

	Ring.Data.Core.DatabaseCollection [Ring]Ring.Data.Core.DatabaseCollection Ring.Data.Core.Global::Databases -> A
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceJobId -> A
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceLexiconId -> a
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceLanguageId -> B
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceUserId -> b
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceIndexId -> C
	Ring.Schema.Models.Sequence [Ring]Ring.Schema.Models.Sequence Ring.Data.Core.Global::SequenceEventId -> c
}

[Ring]Ring.Data.Core.Extensions.Constants -> [Ring]B.B
{

	[Ring]Ring.Data.Core.Extensions.Constants::.cctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::EmptyParameter -> A
	System.Globalization.CultureInfo [Ring]System.Globalization.CultureInfo Ring.Data.Core.Extensions.Constants::FloatFormat -> A
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogId -> a
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaSchemaId -> B
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogEntryTime -> b
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogLevel -> C
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogThreadId -> c
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogJobId -> D
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogCallSite -> d
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogLineNumber -> E
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogMethod -> e
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogMessage -> F
	System.String [Ring]System.String Ring.Data.Core.Extensions.Constants::MetaLogDescription -> f
	System.TimeSpan [Ring]System.TimeSpan Ring.Data.Core.Extensions.Constants::DefaultExecutionTime -> A
	Ring.Data.List [Ring]Ring.Data.List Ring.Data.Core.Extensions.Constants::DefaultRecordList -> A
	System.Int64[] [Ring]System.Int64[] Ring.Data.Core.Extensions.Constants::DefaultDistinctRelationId -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Core.Extensions.Constants::CommandLineTimeOut -> A
}

[Ring]<PrivateImplementationDetails> -> [Ring]B.c
{
	<PrivateImplementationDetails>/__StaticArrayInitTypeSize=6 [Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=6 <PrivateImplementationDetails>::1662AA7D3568725B4DFB9138EBC9BCDE1F22E3FB -> A
	<PrivateImplementationDetails>/__StaticArrayInitTypeSize=72 [Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=72 <PrivateImplementationDetails>::6E0C281275154482C862B7FF2DB4A32F238DF4FE -> A
	<PrivateImplementationDetails>/__StaticArrayInitTypeSize=22 [Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=22 <PrivateImplementationDetails>::D0928A754059A25B91138DB1533C151B8FCA352E -> A
}

[Ring]Ring.Web.WebServer/<>c -> [Ring]Ring.Web.WebServer/A
{
	[Ring]Ring.Web.WebServer/<>c::<Start>b__5_1[1]( [System.Runtime]System.Object ) -> A

	[Ring]Ring.Web.WebServer/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Web.WebServer/<>c::.ctor[0]( ) skipped:  special name

	Ring.Web.WebServer/<>c [Ring]Ring.Web.WebServer/<>c Ring.Web.WebServer/<>c::<>9 -> A
	System.Threading.WaitCallback [Ring]System.Threading.WaitCallback Ring.Web.WebServer/<>c::<>9__5_1 -> A
}

[Ring]Ring.Util.HashMap`2/Entry -> [Ring]A.g`2/A`2
{

	[Ring]Ring.Util.HashMap`2/Entry::.ctor[0]( ) skipped:  special name

	TKey [Ring]TKey Ring.Util.HashMap`2/Entry::Key -> A
	TValue [Ring]TValue Ring.Util.HashMap`2/Entry::Value -> A
	Ring.Util.HashMap`2/Entry<TKey,TValue> [Ring]Ring.Util.HashMap`2/Entry<TKey,TValue> Ring.Util.HashMap`2/Entry::Next -> A
	System.Int32 [Ring]System.Int32 Ring.Util.HashMap`2/Entry::Hashcode -> A
}

[Ring]Ring.Schema.Models.Field -> [Ring]B.E
{

	[Ring]Ring.Schema.Models.Field::.ctor[11]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.FieldType, [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Field::CaseSensitive -> A
	System.String [Ring]System.String Ring.Schema.Models.Field::DefaultValue -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Field::Multilingual -> a
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Field::NotNull -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Field::Size -> A
	Ring.Schema.Enums.FieldType [Ring]Ring.Schema.Enums.FieldType Ring.Schema.Models.Field::Type -> A
}

[Ring]Ring.Schema.Models.Index -> [Ring]B.e
{

	[Ring]Ring.Schema.Models.Index::.ctor[9]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Models.BaseEntity[], [System.Runtime]System.Int32, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Index::Bitmap -> A
	Ring.Schema.Models.BaseEntity[] [Ring]Ring.Schema.Models.BaseEntity[] Ring.Schema.Models.Index::Fields -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Index::TableId -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Index::Unique -> a
}

[Ring]Ring.Schema.Models.Language -> [Ring]B.F
{

	[Ring]Ring.Schema.Models.Language::.ctor[7]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Globalization.CultureInfo, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Globalization.CultureInfo [Ring]System.Globalization.CultureInfo Ring.Schema.Models.Language::CultureInfo -> A
	System.String [Ring]System.String Ring.Schema.Models.Language::NameUpper -> A
}

[Ring]Ring.Schema.Models.Lexicon -> [Ring]B.f
{

	[Ring]Ring.Schema.Models.Lexicon::.ctor[14]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Models.Language[], [System.Runtime]System.Guid, [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.String,[System.Runtime]System.String>[], [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Models.Lexicon::FromField -> A
	System.Guid [Ring]System.Guid Ring.Schema.Models.Lexicon::Guid -> A
	Ring.Schema.Models.Language[] [Ring]Ring.Schema.Models.Language[] Ring.Schema.Models.Lexicon::Languages -> A
	Ring.Schema.Models.Relation [Ring]Ring.Schema.Models.Relation Ring.Schema.Models.Lexicon::Relation -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Lexicon::SchemaId -> A
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Schema.Models.Lexicon::Table -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Models.Lexicon::ToField -> a
	System.Collections.Generic.Dictionary`2<System.String,System.String>[] [Ring]System.Collections.Generic.Dictionary`2<System.String,System.String>[] Ring.Schema.Models.Lexicon::Translations -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Lexicon::UpperCaseSearch -> A
}

[Ring]Ring.Schema.Models.Relation -> [Ring]B.H
{

	[Ring]Ring.Schema.Models.Relation::.ctor[11]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.RelationType, [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.String [Ring]System.String Ring.Schema.Models.Relation::InverseRelationName -> A
	System.String [Ring]System.String Ring.Schema.Models.Relation::MtmTable -> a
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Relation::Constraint -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Relation::NotNull -> a
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Schema.Models.Relation::To -> A
	Ring.Schema.Enums.RelationType [Ring]Ring.Schema.Enums.RelationType Ring.Schema.Models.Relation::Type -> A
}

[Ring]Ring.Schema.Models.Role -> [Ring]B.h
{

	[Ring]Ring.Schema.Models.Role::.ctor[6]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Role::Administrator -> A
}

[Ring]Ring.Schema.Models.Schema -> [Ring]B.I
{

	[Ring]Ring.Schema.Models.Schema::.ctor[24]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [System.Runtime]System.Boolean, [Ring]Ring.Schema.Models.Language, [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.Table[], [Ring]Ring.Schema.Models.Table[], [Ring]Ring.Schema.Models.Table[], [Ring]Ring.Schema.Models.Sequence[], [Ring]Ring.Schema.Models.Lexicon[], [Ring]Ring.Data.Core.ConnectionPool, [Ring]Ring.Schema.Enums.SchemaSourceType, [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Core.Rules.Impl.ValidationResult, [Ring]Ring.Web.WebServer, [System.Runtime]System.DateTime, [Ring]Ring.Schema.Models.TableSpace[], [System.Runtime]System.String ) skipped:  special name

	Ring.Data.Core.ConnectionPool [Ring]Ring.Data.Core.ConnectionPool Ring.Schema.Models.Schema::Connections -> A
	System.String [Ring]System.String Ring.Schema.Models.Schema::ConnectionString -> A
	Ring.Schema.Models.Language [Ring]Ring.Schema.Models.Language Ring.Schema.Models.Schema::DefaultLanguage -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Schema::DefaultPort -> A
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Schema.Models.Schema::Driver -> A
	Ring.Schema.Core.Rules.Impl.ValidationResult [Ring]Ring.Schema.Core.Rules.Impl.ValidationResult Ring.Schema.Models.Schema::Feedback -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Schema::IsMetaSchema -> A
	Ring.Schema.Models.Lexicon[] [Ring]Ring.Schema.Models.Lexicon[] Ring.Schema.Models.Schema::Lexicons -> A
	System.DateTime [Ring]System.DateTime Ring.Schema.Models.Schema::LoadingTime -> A
	Ring.Schema.Enums.SchemaLoadType [Ring]Ring.Schema.Enums.SchemaLoadType Ring.Schema.Models.Schema::LoadType -> A
	Ring.Schema.Models.Table[] [Ring]Ring.Schema.Models.Table[] Ring.Schema.Models.Schema::MtmTables -> A
	Ring.Schema.Models.Sequence[] [Ring]Ring.Schema.Models.Sequence[] Ring.Schema.Models.Schema::Sequences -> A
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Models.Schema::Source -> A
	Ring.Schema.Models.Table[] [Ring]Ring.Schema.Models.Table[] Ring.Schema.Models.Schema::TablesById -> a
	Ring.Schema.Models.Table[] [Ring]Ring.Schema.Models.Table[] Ring.Schema.Models.Schema::TablesByName -> B
	Ring.Schema.Models.TableSpace[] [Ring]Ring.Schema.Models.TableSpace[] Ring.Schema.Models.Schema::TableSpaces -> A
	System.String [Ring]System.String Ring.Schema.Models.Schema::Version -> a
	Ring.Web.WebServer [Ring]Ring.Web.WebServer Ring.Schema.Models.Schema::WebServer -> A
	System.String [Ring]System.String Ring.Schema.Models.Schema::SearchPath -> B
}

[Ring]Ring.Schema.Models.Sequence -> [Ring]B.i
{

	[Ring]Ring.Schema.Models.Sequence::.ctor[8]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.CacheId, [System.Runtime]System.Int64, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Sequence::SchemaId -> A
	System.Int64 [Ring]System.Int64 Ring.Schema.Models.Sequence::MaxValue -> A
	Ring.Schema.Models.CacheId [Ring]Ring.Schema.Models.CacheId Ring.Schema.Models.Sequence::Value -> A
}

[Ring]Ring.Schema.Models.Table -> [Ring]B.J
{

	[Ring]Ring.Schema.Models.Table::.ctor[21]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.TableType, [Ring]Ring.Schema.Models.Relation[], [Ring]Ring.Schema.Models.Field[], [Ring]Ring.Schema.Models.Field[], [Ring]Ring.Schema.Models.Index[], [Ring]Ring.Schema.Models.Field, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.LexiconIndex[], [Ring]Ring.Schema.Enums.PhysicalType, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [Ring]Ring.Schema.Models.CacheId ) skipped:  special name

	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Table::Cached -> A
	Ring.Schema.Models.Field[] [Ring]Ring.Schema.Models.Field[] Ring.Schema.Models.Table::Fields -> A
	Ring.Schema.Models.Field[] [Ring]Ring.Schema.Models.Field[] Ring.Schema.Models.Table::FieldsById -> a
	Ring.Schema.Models.Index[] [Ring]Ring.Schema.Models.Index[] Ring.Schema.Models.Table::Indexes -> A
	Ring.Schema.Models.LexiconIndex[] [Ring]Ring.Schema.Models.LexiconIndex[] Ring.Schema.Models.Table::LexiconIndexes -> A
	System.String [Ring]System.String Ring.Schema.Models.Table::PhysicalName -> A
	Ring.Schema.Enums.PhysicalType [Ring]Ring.Schema.Enums.PhysicalType Ring.Schema.Models.Table::PhysicalType -> A
	Ring.Schema.Models.Field [Ring]Ring.Schema.Models.Field Ring.Schema.Models.Table::PrimaryKey -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Table::PrimaryKeyIdIndex -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Table::Readonly -> a
	Ring.Schema.Models.Relation[] [Ring]Ring.Schema.Models.Relation[] Ring.Schema.Models.Table::Relations -> A
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.Table::SchemaId -> a
	System.String [Ring]System.String Ring.Schema.Models.Table::Subject -> a
	Ring.Schema.Enums.TableType [Ring]Ring.Schema.Enums.TableType Ring.Schema.Models.Table::Type -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.Table::Unlogged -> B
	Ring.Schema.Models.CacheId [Ring]Ring.Schema.Models.CacheId Ring.Schema.Models.Table::CacheId -> A
}

[Ring]Ring.Schema.Models.TableSpace -> [Ring]B.j
{

	[Ring]Ring.Schema.Models.TableSpace::.ctor[11]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name

	System.String [Ring]System.String Ring.Schema.Models.TableSpace::FileName -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.TableSpace::IsIndex -> A
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.TableSpace::IsReadonly -> a
	System.Boolean [Ring]System.Boolean Ring.Schema.Models.TableSpace::IsTable -> B
	System.Int32 [Ring]System.Int32 Ring.Schema.Models.TableSpace::SchemaId -> A
	System.String [Ring]System.String Ring.Schema.Models.TableSpace::TableName -> a
}

[Ring]Ring.Schema.Helpers.PostgreSqlHelper/<>c -> [Ring]A.U/A
{
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper/<>c::<CreateTable>b__11_0[2]( [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Models.Relation ) -> A

	[Ring]Ring.Schema.Helpers.PostgreSqlHelper/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper/<>c::.ctor[0]( ) skipped:  special name

	Ring.Schema.Helpers.PostgreSqlHelper/<>c [Ring]Ring.Schema.Helpers.PostgreSqlHelper/<>c Ring.Schema.Helpers.PostgreSqlHelper/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Models.Relation> [Ring]System.Comparison`1<Ring.Schema.Models.Relation> Ring.Schema.Helpers.PostgreSqlHelper/<>c::<>9__11_0 -> A
}

[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c -> [Ring]a.i/A
{
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<GetEntityTypeId>b__68_0[2]( [Ring]Ring.Schema.Core.Extensions.models.EntityTypeEnumsId, [Ring]Ring.Schema.Core.Extensions.models.EntityTypeEnumsId ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<GetFieldTypeId>b__69_0[2]( [Ring]Ring.Schema.Core.Extensions.models.FieldTypeEnumsId, [Ring]Ring.Schema.Core.Extensions.models.FieldTypeEnumsId ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<GetRelationTypeId>b__70_0[2]( [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsId, [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsId ) -> A
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<GetRelationTypeName>b__71_0[2]( [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsName, [Ring]Ring.Schema.Core.Extensions.models.RelationTypeEnumsName ) -> A

	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c::.ctor[0]( ) skipped:  special name

	Ring.Schema.Core.Extensions.MetaDataExtension/<>c [Ring]Ring.Schema.Core.Extensions.MetaDataExtension/<>c Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Core.Extensions.models.EntityTypeEnumsId> [Ring]System.Comparison`1<Ring.Schema.Core.Extensions.models.EntityTypeEnumsId> Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<>9__68_0 -> A
	System.Comparison`1<Ring.Schema.Core.Extensions.models.FieldTypeEnumsId> [Ring]System.Comparison`1<Ring.Schema.Core.Extensions.models.FieldTypeEnumsId> Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<>9__69_0 -> A
	System.Comparison`1<Ring.Schema.Core.Extensions.models.RelationTypeEnumsId> [Ring]System.Comparison`1<Ring.Schema.Core.Extensions.models.RelationTypeEnumsId> Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<>9__70_0 -> A
	System.Comparison`1<Ring.Schema.Core.Extensions.models.RelationTypeEnumsName> [Ring]System.Comparison`1<Ring.Schema.Core.Extensions.models.RelationTypeEnumsName> Ring.Schema.Core.Extensions.MetaDataExtension/<>c::<>9__71_0 -> A
}

[Ring]Ring.Schema.Builders.LanguageBuilder -> [Ring]B.M
{
	[Ring]Ring.Schema.Builders.LanguageBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.MetaData ) -> A
	[Ring]Ring.Schema.Builders.LanguageBuilder::GetInstance[1]( [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Schema.Builders.LanguageBuilder::GetInstance[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.LanguageBuilder::GetDefaultInstance[0]( ) -> A

	[Ring]Ring.Schema.Builders.LanguageBuilder::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Builders.LanguageBuilder::.cctor[0]( ) skipped:  special name

	System.Collections.Concurrent.ConcurrentDictionary`2<System.String,Ring.Schema.Models.Language> [Ring]System.Collections.Concurrent.ConcurrentDictionary`2<System.String,Ring.Schema.Models.Language> Ring.Schema.Builders.LanguageBuilder::LanguageCache -> A
}

[Ring]Ring.Schema.Builders.LexiconBuilder -> [Ring]B.m
{
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetInstances[2]( [Ring]Ring.Data.Record, [Ring]Ring.Data.List ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetInstance[2]( [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Language[] ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetInstance[7]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int32, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetLexiconName[5]( [System.Runtime]System.Int32, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetLexiconId[0]( ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::GetLexiconGuid[0]( ) -> a
	[Ring]Ring.Schema.Builders.LexiconBuilder::Getlanguages[1]( [Ring]Ring.Data.List ) -> A
	[Ring]Ring.Schema.Builders.LexiconBuilder::LoadTranslation[2]( [Ring]Ring.Schema.Models.Lexicon, [Ring]Ring.Data.List ) -> A

	[Ring]Ring.Schema.Builders.LexiconBuilder::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.LanguageBuilder [Ring]Ring.Schema.Builders.LanguageBuilder Ring.Schema.Builders.LexiconBuilder::_languageBuilder -> A
}

[Ring]Ring.Schema.Builders.MetaDataBuilder -> [Ring]B.N
{
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstances[1]( [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetFlags[1]( [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.Language ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstances[1]( [System.Runtime]System.IO.Stream ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstances[1]( [Ring]Ring.Data.List ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetNullInstance[0]( ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.Sequence ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[2]( [System.Runtime]System.String, [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetInstance[2]( [System.Runtime]System.String, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetClfyDataType[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetClfyDataType[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetFields[2]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::DefaultMetaFactory[6]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.EntityType, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::ClfytMetaFactory[6]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.EntityType, [System.Runtime]System.Int64 ) -> a
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetTableId[2]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.Boolean ) -> a
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetTableId[3]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.String,[System.Runtime]System.String>, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::SetDescription[2]( [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.MetaData>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.MetaDataBuilder::GetEntityType[2]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.Boolean ) -> B

	[Ring]Ring.Schema.Builders.MetaDataBuilder::.ctor[0]( ) skipped:  special name

	Ring.Schema.Enums.EntityType [Ring]Ring.Schema.Enums.EntityType Ring.Schema.Builders.MetaDataBuilder::DefaultEntityType -> A
}

[Ring]Ring.Schema.Builders.SchemaBuilder -> [Ring]B.o
{
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetInstance[3]( [System.Runtime]System.IO.Stream, [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Enums.SchemaLoadType ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetInstance[3]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.MetaData[], [Ring]Ring.Schema.Enums.SchemaLoadType ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetInstance[1]( [Ring]Ring.Data.Core.ConnectionPool ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::LoadRelations[6]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData[], [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.Int32,[System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.String,[System.Runtime]System.Int32>> ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::LoadIndexes[5]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData[], [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetSchemaType[1]( [System.Runtime]System.IO.Stream ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetSchemaType[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetComparisonType[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetInstance[6]( [Ring]Ring.Data.Core.ConnectionPool, [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Core.Rules.Impl.ValidationResult, [Ring]Ring.Schema.Models.MetaData[], [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Enums.SchemaSourceType ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetConnectionPool[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> a
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetNumberOfLexicon[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> B
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetTableSpaces[2]( [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder::GetDefaultSearchPath[2]( [System.Runtime]System.Boolean, [Ring]Ring.Data.DatabaseProvider ) -> A

	[Ring]Ring.Schema.Builders.SchemaBuilder::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.TableBuilder [Ring]Ring.Schema.Builders.TableBuilder Ring.Schema.Builders.SchemaBuilder::_tableBuilder -> A
	Ring.Schema.Builders.IndexBuilder [Ring]Ring.Schema.Builders.IndexBuilder Ring.Schema.Builders.SchemaBuilder::_indexBuilder -> A
	Ring.Schema.Builders.LanguageBuilder [Ring]Ring.Schema.Builders.LanguageBuilder Ring.Schema.Builders.SchemaBuilder::_languageBuilder -> A
	Ring.Schema.Builders.MetaDataBuilder [Ring]Ring.Schema.Builders.MetaDataBuilder Ring.Schema.Builders.SchemaBuilder::_metaDataBuilder -> A
	Ring.Schema.Builders.RelationBuilder [Ring]Ring.Schema.Builders.RelationBuilder Ring.Schema.Builders.SchemaBuilder::_relationBuilder -> A
	Ring.Schema.Builders.SequenceBuilder [Ring]Ring.Schema.Builders.SequenceBuilder Ring.Schema.Builders.SchemaBuilder::_sequenceBuilder -> A
	Ring.Schema.Builders.TableSpaceBuilder [Ring]Ring.Schema.Builders.TableSpaceBuilder Ring.Schema.Builders.SchemaBuilder::_tableSpaceBuilder -> A
}

[Ring]Ring.Schema.Builders.TableBuilder -> [Ring]B.p
{
	[Ring]Ring.Schema.Builders.TableBuilder::GetDictionaryTable[1]( [Ring]Ring.Data.DatabaseProvider ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetDictionaryTableSpace[1]( [Ring]Ring.Data.DatabaseProvider ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder::GetFake[1]( [Ring]Ring.Data.Enums.ItemType ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetMeta[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetUser[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder::GetLexicon[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> B
	[Ring]Ring.Schema.Builders.TableBuilder::GetLexiconItem[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> b
	[Ring]Ring.Schema.Builders.TableBuilder::GetDictionarySchema[1]( [Ring]Ring.Data.DatabaseProvider ) -> B
	[Ring]Ring.Schema.Builders.TableBuilder::GetLog[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> C
	[Ring]Ring.Schema.Builders.TableBuilder::GetMetaId[2]( [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider ) -> c
	[Ring]Ring.Schema.Builders.TableBuilder::GetMtms[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.DatabaseProvider, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Relation> ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetInstance[10]( [System.Runtime]System.String, [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Int32, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Enums.SchemaSourceType, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.Int32, [System.Runtime]System.Int32& ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetSchemaName[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetTableName[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder::GetRelationIndex[1]( [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetFieldIndex[2]( [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Field>, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetPhysicalName[3]( [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetPhysicalName[4]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Enums.SchemaSourceType, [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetFieldPositionByName[2]( [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Field>, [System.Runtime]System.String ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder::GetRelationCount[3]( [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::GetIndexCount[3]( [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder::LoadFieldLists[10]( [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Field>, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Field>, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.LexiconIndex>, [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Enums.SchemaSourceType, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.Int32& ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder::LoadMtmIndexes[1]( [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Table> ) -> A

	[Ring]Ring.Schema.Builders.TableBuilder::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.FieldBuilder [Ring]Ring.Schema.Builders.FieldBuilder Ring.Schema.Builders.TableBuilder::_fieldBuilder -> A
	Ring.Schema.Builders.IndexBuilder [Ring]Ring.Schema.Builders.IndexBuilder Ring.Schema.Builders.TableBuilder::_indexBuilder -> A
}

[Ring]Ring.Data.Import/<>c -> [Ring]Ring.Data.Import/A
{
	[Ring]Ring.Data.Import/<>c::<ProcessEntity>b__9_0[1]( [Ring]Ring.Util.Models.ExcelField ) -> A
	[Ring]Ring.Data.Import/<>c::<GetSheetList>b__11_0[2]( [System.Runtime]System.Tuple`2<[System.Runtime]System.Int32,[Ring]Ring.Util.Models.ExcelSheet>, [System.Runtime]System.Tuple`2<[System.Runtime]System.Int32,[Ring]Ring.Util.Models.ExcelSheet> ) -> A

	[Ring]Ring.Data.Import/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Data.Import/<>c::.ctor[0]( ) skipped:  special name

	Ring.Data.Import/<>c [Ring]Ring.Data.Import/<>c Ring.Data.Import/<>c::<>9 -> A
	System.Predicate`1<Ring.Util.Models.ExcelField> [Ring]System.Predicate`1<Ring.Util.Models.ExcelField> Ring.Data.Import/<>c::<>9__9_0 -> A
	System.Comparison`1<System.Tuple`2<System.Int32,Ring.Util.Models.ExcelSheet>> [Ring]System.Comparison`1<System.Tuple`2<System.Int32,Ring.Util.Models.ExcelSheet>> Ring.Data.Import/<>c::<>9__11_0 -> A
}

[Ring]Ring.Data.Import/<>c__DisplayClass22_0 -> [Ring]Ring.Data.Import/a
{
	[Ring]Ring.Data.Import/<>c__DisplayClass22_0::<FinalizeTableImport>b__0[0]( ) -> A

	[Ring]Ring.Data.Import/<>c__DisplayClass22_0::.ctor[0]( ) skipped:  special name

	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Import/<>c__DisplayClass22_0::table -> A
	System.Int64 [Ring]System.Int64 Ring.Data.Import/<>c__DisplayClass22_0::maxId -> A
}

[Ring]Ring.Data.List/<>c__DisplayClass41_0 -> [Ring]Ring.Data.List/A
{
	[Ring]Ring.Data.List/<>c__DisplayClass41_0::<Sort>b__1[2]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.List/<>c__DisplayClass41_0::<Sort>b__2[2]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record ) -> a

	[Ring]Ring.Data.List/<>c__DisplayClass41_0::.ctor[0]( ) skipped:  special name

	System.Int32 [Ring]System.Int32 Ring.Data.List/<>c__DisplayClass41_0::sortTypeId -> A
}

[Ring]Ring.Data.List/<>c__DisplayClass41_1 -> [Ring]Ring.Data.List/a
{
	[Ring]Ring.Data.List/<>c__DisplayClass41_1::<Sort>b__0[2]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record ) -> A

	[Ring]Ring.Data.List/<>c__DisplayClass41_1::.ctor[0]( ) skipped:  special name

	System.Int64 [Ring]System.Int64 Ring.Data.List/<>c__DisplayClass41_1::l1 -> A
	System.Int64 [Ring]System.Int64 Ring.Data.List/<>c__DisplayClass41_1::l2 -> a
	Ring.Data.List/<>c__DisplayClass41_0 [Ring]Ring.Data.List/<>c__DisplayClass41_0 Ring.Data.List/<>c__DisplayClass41_1::CS$<>8__locals1 -> A
}

[Ring]Ring.Data.List/<Items>d__48 -> [Ring]Ring.Data.List/B
{
	[Ring]Ring.Data.List/<Items>d__48::System.IDisposable.Dispose[0]( ) -> A
	[Ring]Ring.Data.List/<Items>d__48::System.Collections.Generic.IEnumerator<Ring.Data.Record>.get_Current[0]( ) -> a
	[Ring]Ring.Data.List/<Items>d__48::System.Collections.IEnumerator.Reset[0]( ) -> B
	[Ring]Ring.Data.List/<Items>d__48::System.Collections.IEnumerator.get_Current[0]( ) -> b
	[Ring]Ring.Data.List/<Items>d__48::System.Collections.Generic.IEnumerable<Ring.Data.Record>.GetEnumerator[0]( ) -> C
	[Ring]Ring.Data.List/<Items>d__48::System.Collections.IEnumerable.GetEnumerator[0]( ) -> c

	[Ring]Ring.Data.List/<Items>d__48::.ctor[1]( [System.Runtime]System.Int32 ) skipped:  special name
	[Ring]Ring.Data.List/<Items>d__48::MoveNext[0]( ) skipped:  external base class or interface

	System.Int32 [Ring]System.Int32 Ring.Data.List/<Items>d__48::<>1__state -> A
	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.List/<Items>d__48::<>2__current -> A
	System.Int32 [Ring]System.Int32 Ring.Data.List/<Items>d__48::<>l__initialThreadId -> a
	Ring.Data.List [Ring]Ring.Data.List Ring.Data.List/<Items>d__48::<>4__this -> A
	System.Int32 [Ring]System.Int32 Ring.Data.List/<Items>d__48::<i>5__2 -> B

	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.List/<Items>d__48::System.Collections.Generic.IEnumerator<Ring.Data.Record>.Current -> dropped
	System.Object [Ring]System.Object Ring.Data.List/<Items>d__48::System.Collections.IEnumerator.Current -> dropped
}

[Ring]Ring.Data.Models.ImportParameters -> [Ring]B.T
{
	[Ring]Ring.Data.Models.ImportParameters::get_File[0]( ) -> A
	[Ring]Ring.Data.Models.ImportParameters::set_File[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Models.ImportParameters::get_SchemaName[0]( ) -> a
	[Ring]Ring.Data.Models.ImportParameters::set_SchemaName[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.Models.ImportParameters::get_TrimValue[0]( ) -> B
	[Ring]Ring.Data.Models.ImportParameters::set_TrimValue[1]( [System.Runtime]System.Boolean ) -> A

	[Ring]Ring.Data.Models.ImportParameters::.ctor[0]( ) skipped:  special name

	System.String [Ring]System.String Ring.Data.Models.ImportParameters::<File>k__BackingField -> A
	System.String [Ring]System.String Ring.Data.Models.ImportParameters::<SchemaName>k__BackingField -> a
	System.Boolean [Ring]System.Boolean Ring.Data.Models.ImportParameters::<TrimValue>k__BackingField -> A

	System.String [Ring]System.String Ring.Data.Models.ImportParameters::File -> dropped
	System.String [Ring]System.String Ring.Data.Models.ImportParameters::SchemaName -> dropped
	System.Boolean [Ring]System.Boolean Ring.Data.Models.ImportParameters::TrimValue -> dropped
}

[Ring]Ring.Data.Core.DatabaseCollection/<>c -> [Ring]a.Z/A
{
	[Ring]Ring.Data.Core.DatabaseCollection/<>c::<Add>b__50_0[2]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Models.Schema ) -> A

	[Ring]Ring.Data.Core.DatabaseCollection/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Data.Core.DatabaseCollection/<>c::.ctor[0]( ) skipped:  special name

	Ring.Data.Core.DatabaseCollection/<>c [Ring]Ring.Data.Core.DatabaseCollection/<>c Ring.Data.Core.DatabaseCollection/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Models.Schema> [Ring]System.Comparison`1<Ring.Schema.Models.Schema> Ring.Data.Core.DatabaseCollection/<>c::<>9__50_0 -> A
}

[Ring]Ring.Schema.Builders.LexiconBuilder/<>c -> [Ring]B.m/A
{
	[Ring]Ring.Schema.Builders.LexiconBuilder/<>c::<Getlanguages>b__7_0[2]( [Ring]Ring.Schema.Models.Language, [Ring]Ring.Schema.Models.Language ) -> A

	[Ring]Ring.Schema.Builders.LexiconBuilder/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Builders.LexiconBuilder/<>c::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.LexiconBuilder/<>c [Ring]Ring.Schema.Builders.LexiconBuilder/<>c Ring.Schema.Builders.LexiconBuilder/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Models.Language> [Ring]System.Comparison`1<Ring.Schema.Models.Language> Ring.Schema.Builders.LexiconBuilder/<>c::<>9__7_0 -> A
}

[Ring]Ring.Schema.Builders.SchemaBuilder/<>c -> [Ring]B.o/A
{
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__9_0[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__9_1[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__15_0[2]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData ) -> A
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__15_1[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__15_2[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> b
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::<GetInstance>b__15_3[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> C

	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Builders.SchemaBuilder/<>c::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.SchemaBuilder/<>c [Ring]Ring.Schema.Builders.SchemaBuilder/<>c Ring.Schema.Builders.SchemaBuilder/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Models.Table> [Ring]System.Comparison`1<Ring.Schema.Models.Table> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__9_0 -> A
	System.Comparison`1<Ring.Schema.Models.Table> [Ring]System.Comparison`1<Ring.Schema.Models.Table> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__9_1 -> a
	System.Comparison`1<Ring.Schema.Models.MetaData> [Ring]System.Comparison`1<Ring.Schema.Models.MetaData> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__15_0 -> A
	System.Comparison`1<Ring.Schema.Models.Table> [Ring]System.Comparison`1<Ring.Schema.Models.Table> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__15_1 -> B
	System.Comparison`1<Ring.Schema.Models.Table> [Ring]System.Comparison`1<Ring.Schema.Models.Table> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__15_2 -> b
	System.Comparison`1<Ring.Schema.Models.Table> [Ring]System.Comparison`1<Ring.Schema.Models.Table> Ring.Schema.Builders.SchemaBuilder/<>c::<>9__15_3 -> C
}

[Ring]Ring.Schema.Builders.TableBuilder/<>c -> [Ring]B.p/A
{
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionaryTable>b__2_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionaryTable>b__2_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> a
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionaryTableSpace>b__3_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> B
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionaryTableSpace>b__3_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> b
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetMeta>b__5_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> C
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetMeta>b__5_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> c
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetUser>b__6_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> D
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetUser>b__6_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> d
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetLexicon>b__7_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> E
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetLexicon>b__7_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> e
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetLexiconItem>b__8_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> F
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetLexiconItem>b__8_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> f
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionarySchema>b__9_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> G
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetDictionarySchema>b__9_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> g
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetLog>b__10_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> H
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetMetaId>b__11_0[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> h
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetInstance>b__13_0[2]( [Ring]Ring.Schema.Models.LexiconIndex, [Ring]Ring.Schema.Models.LexiconIndex ) -> A
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::<GetInstance>b__13_1[2]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Models.Field ) -> I

	[Ring]Ring.Schema.Builders.TableBuilder/<>c::.cctor[0]( ) skipped:  special name
	[Ring]Ring.Schema.Builders.TableBuilder/<>c::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.TableBuilder/<>c [Ring]Ring.Schema.Builders.TableBuilder/<>c Ring.Schema.Builders.TableBuilder/<>c::<>9 -> A
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__2_0 -> A
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__2_1 -> a
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__3_0 -> B
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__3_1 -> b
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__5_0 -> C
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__5_1 -> c
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__6_0 -> D
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__6_1 -> d
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__7_0 -> E
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__7_1 -> e
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__8_0 -> F
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__8_1 -> f
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__9_0 -> G
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__9_1 -> g
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__10_0 -> H
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__11_0 -> h
	System.Comparison`1<Ring.Schema.Models.LexiconIndex> [Ring]System.Comparison`1<Ring.Schema.Models.LexiconIndex> Ring.Schema.Builders.TableBuilder/<>c::<>9__13_0 -> A
	System.Comparison`1<Ring.Schema.Models.Field> [Ring]System.Comparison`1<Ring.Schema.Models.Field> Ring.Schema.Builders.TableBuilder/<>c::<>9__13_1 -> I
}

[Ring]Ring.Program -> [Ring]A.A
{
	[Ring]Ring.Program::Main[1]( [System.Runtime]System.String[] ) -> A

	[Ring]Ring.Program::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Web.Helpers.HtmlHelper -> [Ring]A.b
{
	[Ring]Ring.Web.Helpers.HtmlHelper::GetOpenTag[1]( [Ring]Ring.Web.Enums.HtmlTag ) -> A
	[Ring]Ring.Web.Helpers.HtmlHelper::GetOpenTag[3]( [Ring]Ring.Web.Enums.HtmlTag, [Ring]Ring.Web.Enums.HtmlAttribute, [System.Runtime]System.String ) -> A
	[Ring]Ring.Web.Helpers.HtmlHelper::GetCloseTag[1]( [Ring]Ring.Web.Enums.HtmlTag ) -> a
	[Ring]Ring.Web.Helpers.HtmlHelper::GetTag[1]( [Ring]Ring.Web.Enums.HtmlTag ) -> B
	[Ring]Ring.Web.Helpers.HtmlHelper::GetAttribute[2]( [Ring]Ring.Web.Enums.HtmlAttribute, [System.Runtime]System.String ) -> A
}

[Ring]Ring.Web.Helpers.JsonHelper -> [Ring]A.C
{
	[Ring]Ring.Web.Helpers.JsonHelper::ToJson[0]( ) -> A
}

[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension -> [Ring]A.e
{
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::HandleRestApi[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> A
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Get[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> a
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Post[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> B
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Put[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> b
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Patch[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> C
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Delete[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> c
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Options[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> D
	[Ring]Ring.Web.Core.Extensions.HttpListenerContextExtension::Other[1]( [System.Net.HttpListener]System.Net.HttpListenerContext ) -> d
}

[Ring]Ring.Web.Core.Extensions.HttpListenerRequestExtension -> [Ring]A.F
{
	[Ring]Ring.Web.Core.Extensions.HttpListenerRequestExtension::GetVerbType[1]( [System.Net.HttpListener]System.Net.HttpListenerRequest ) -> A
}

[Ring]Ring.Util.NamingConvention -> [Ring]A.H
{
	[Ring]Ring.Util.NamingConvention::ToPascalCase[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.NamingConvention::ToCamelCase[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Util.NamingConvention::ToSnakeCase[1]( [System.Runtime]System.String ) -> B
	[Ring]Ring.Util.NamingConvention::ToKebabCase[1]( [System.Runtime]System.String ) -> b
}

[Ring]Ring.Util.Obfuscator -> [Ring]A.h
{
	[Ring]Ring.Util.Obfuscator::Encode[1]( [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Util.Obfuscator::Decode[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Obfuscator::LongToBase[1]( [System.Runtime]System.Int64 ) -> a
	[Ring]Ring.Util.Obfuscator::BaseToLong[1]( [System.Runtime]System.String ) -> a

	[Ring]Ring.Util.Obfuscator::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Util.Models.HashMapEntry -> [Ring]A.K
{

	[Ring]Ring.Util.Models.HashMapEntry::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Util.Helpers.XmlHelper -> [Ring]A.k
{
	[Ring]Ring.Util.Helpers.XmlHelper::FormatAttribute[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Helpers.XmlHelper::GetAttributeValue[3]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Util.Helpers.XmlHelper::RemoveNameSpaceInfo[1]( [System.Runtime]System.String ) -> a
}

[Ring]Ring.Util.Core.Extensions.DictionaryExtension -> [Ring]A.l
{
	[Ring]Ring.Util.Core.Extensions.DictionaryExtension::ToArray[1]( [System.Collections]System.Collections.Generic.Dictionary`2<!0,!1> ) -> A
	[Ring]Ring.Util.Core.Extensions.DictionaryExtension::ToArrayOfValue[1]( [System.Collections]System.Collections.Generic.Dictionary`2<!0,!1> ) -> a
	[Ring]Ring.Util.Core.Extensions.DictionaryExtension::TryGetValue[2]( [System.Collections]System.Collections.Generic.Dictionary`2<!0,!1>, !0 ) -> A
	[Ring]Ring.Util.Core.Extensions.DictionaryExtension::TryToAdd[3]( [System.Collections]System.Collections.Generic.Dictionary`2<!0,!1>, !0, !1 ) -> A
}

[Ring]Ring.Util.Core.Extensions.SortedDictionaryExtension -> [Ring]A.M
{
	[Ring]Ring.Util.Core.Extensions.SortedDictionaryExtension::ToArray[1]( [System.Collections]System.Collections.Generic.SortedDictionary`2<!0,!1> ) -> A
	[Ring]Ring.Util.Core.Extensions.SortedDictionaryExtension::TryGetValue[2]( [System.Collections]System.Collections.Generic.SortedDictionary`2<!0,!1>, !0 ) -> A
	[Ring]Ring.Util.Core.Extensions.SortedDictionaryExtension::Copy[1]( [System.Collections]System.Collections.Generic.SortedDictionary`2<!0,!1> ) -> a
	[Ring]Ring.Util.Core.Extensions.SortedDictionaryExtension::TryToAdd[3]( [System.Collections]System.Collections.Generic.SortedDictionary`2<!0,!1>, !0, !1 ) -> A
}

[Ring]Ring.Util.Core.Extensions.StringBuilderExtension -> [Ring]A.m
{
	[Ring]Ring.Util.Core.Extensions.StringBuilderExtension::Reverse[1]( [System.Runtime]System.Text.StringBuilder ) -> A
}

[Ring]Ring.Util.Builders.ExcelFieldBuilder -> [Ring]A.n
{
	[Ring]Ring.Util.Builders.ExcelFieldBuilder::GetInstances[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Util.Models.ExcelSheet ) -> A
	[Ring]Ring.Util.Builders.ExcelFieldBuilder::GetkeyDico[1]( [Ring]Ring.Schema.Models.Table ) -> A
}

[Ring]Ring.Util.Builders.ExcelSheetBuilder -> [Ring]A.O
{
	[Ring]Ring.Util.Builders.ExcelSheetBuilder::GetInstance[4]( [System.Collections]System.Collections.Generic.SortedDictionary`2<[System.Runtime]System.String,[System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.Int32,[System.Runtime]System.String>>, [Ring]Ring.Util.Models.ExcelSheet, [System.Collections]System.Collections.Generic.List`1<[System.Runtime]System.String>, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Util.Builders.ExcelSheetBuilder::GetColumnArray[3]( [System.Collections]System.Collections.Generic.SortedDictionary`2<[System.Runtime]System.String,[System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.Int32,[System.Runtime]System.String>>, [System.Collections]System.Collections.Generic.List`1<[System.Runtime]System.String>, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Util.Builders.ExcelSheetBuilder::GetFirstLetter[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Builders.ExcelSheetBuilder::GetMinRange[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Builders.ExcelSheetBuilder::GetMaxRange[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> a
}

[Ring]Ring.Schema.Mappers.MetaDataMapper -> [Ring]A.T
{
	[Ring]Ring.Schema.Mappers.MetaDataMapper::Map[1]( [Ring]Ring.Data.Record ) -> A
}

[Ring]Ring.Schema.Helpers.PostgreSqlHelper -> [Ring]A.U
{
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToIndex[4]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToTable[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToTable[4]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToConstraint[5]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Enums.ConstraintType, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToFieldType[1]( [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::CreateForeignKey[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::CreatePrimaryKey[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToTableSpace[2]( [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToSchema[2]( [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToFieldConstraint[1]( [Ring]Ring.Schema.Models.Field ) -> a
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToField[3]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::CreateTable[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> a
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::CreateTablespace[1]( [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::DropTable[1]( [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::GetCreateTableParameter[1]( [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::GetStorageParameters[1]( [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::AddField[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::RemoveField[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [System.Runtime]System.Boolean ) -> a
	[Ring]Ring.Schema.Helpers.PostgreSqlHelper::ToRelation[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Enums.DatabaseOperation ) -> A
}

[Ring]Ring.Schema.Helpers.SqlHelper -> [Ring]A.u
{
	[Ring]Ring.Schema.Helpers.SqlHelper::CreateTable[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::CreatePrimaryKey[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> a
	[Ring]Ring.Schema.Helpers.SqlHelper::CreateForeignKey[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::CreateSchema[2]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::CreateIndex[4]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::DropIndex[4]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::CreateTableSpace[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::TruncateTable[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::AlterTable[4]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [Ring]Ring.Schema.Enums.DatabaseOperation ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::DropTable[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Helpers.SqlHelper::Analyze[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Helpers.SqlHelper::Vacuum[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table ) -> b
	[Ring]Ring.Schema.Helpers.SqlHelper::GetSearchableFieldName[1]( [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::GetFieldName[3]( [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToIndex[5]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToTableSpace[3]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToSchema[3]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToTable[4]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToTable[5]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.SqlHelper::ToConstaint[6]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Enums.ConstraintType, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
}

[Ring]Ring.Schema.Helpers.SqliteHelper -> [Ring]A.V
{
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToFieldType[1]( [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToIndex[4]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToTable[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.DatabaseOperation, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToTable[4]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.BaseEntity, [Ring]Ring.Schema.Enums.DatabaseOperation, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::GetPrimaryKey[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToFieldConstraint[1]( [Ring]Ring.Schema.Models.Field ) -> a
	[Ring]Ring.Schema.Helpers.SqliteHelper::CreateTable[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.TableSpace ) -> a
	[Ring]Ring.Schema.Helpers.SqliteHelper::ToRelation[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Schema.Enums.DatabaseOperation ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::DropTable[1]( [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::DropIndex[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Helpers.SqliteHelper::CreateIndex[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Models.TableSpace ) -> A
}

[Ring]Ring.Schema.Core.Rules.IValidationRule`1 -> [Ring]a.B`1
{
	[Ring]Ring.Schema.Core.Rules.IValidationRule`1::Validate[1]( !0[] ) -> A
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaDataType -> [Ring]a.C
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaDataType::Validate[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaDataType::CheckDataType[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaDataType::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId -> [Ring]a.c
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId::Validate[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId::ValidId[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId::TableIdUnique[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> a
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId::IsNumber[1]( [System.Runtime]System.String ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaId::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaIndex -> [Ring]a.D
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaIndex::Validate[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaIndex::CheckUniqueDefinition[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaIndex::CheckFieldDefinition[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> a

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaIndex::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName -> [Ring]a.d
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName::Validate[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName::CheckName[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName::CheckUniqueName[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> a
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName::IsValidName[1]( [System.Runtime]System.String ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaName::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaRelation -> [Ring]a.E
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaRelation::Validate[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaRelation::CheckRelation[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaRelation::GetOppositRelationType[1]( [Ring]Ring.Schema.Enums.RelationType ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationMetaRelation::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Rules.Impl.ValidationTableMetaKey -> [Ring]a.F
{
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationTableMetaKey::Validate[1]( [Ring]Ring.Schema.Models.Table[] ) -> A
	[Ring]Ring.Schema.Core.Rules.Impl.ValidationTableMetaKey::CheckUniqueKey[1]( [Ring]Ring.Schema.Models.Table[] ) -> A

	[Ring]Ring.Schema.Core.Rules.Impl.ValidationTableMetaKey::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Core.Extensions.EntityTypeExtension -> [Ring]a.G
{
	[Ring]Ring.Schema.Core.Extensions.EntityTypeExtension::GetId[1]( [Ring]Ring.Schema.Enums.EntityType ) -> A
}

[Ring]Ring.Schema.Core.Extensions.FieldTypeExtension -> [Ring]a.H
{
	[Ring]Ring.Schema.Core.Extensions.FieldTypeExtension::GetId[1]( [Ring]Ring.Schema.Enums.FieldType ) -> A
	[Ring]Ring.Schema.Core.Extensions.FieldTypeExtension::GetDefault[3]( [Ring]Ring.Schema.Enums.FieldType, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String ) -> A
}

[Ring]Ring.Schema.Core.Extensions.IndexExtension -> [Ring]a.h
{
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::GetPhysicalName[2]( [Ring]Ring.Schema.Models.Index, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::GetKey[1]( [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::GetCurrentTable[1]( [Ring]Ring.Schema.Models.Index ) -> a
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::GetMtmTable[1]( [Ring]Ring.Schema.Models.Index ) -> B
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::Create[1]( [Ring]Ring.Schema.Models.Index ) -> b
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::Remove[1]( [Ring]Ring.Schema.Models.Index ) -> C
	[Ring]Ring.Schema.Core.Extensions.IndexExtension::IndexExists[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Index ) -> A
}

[Ring]Ring.Schema.Core.Extensions.LexiconExtension -> [Ring]a.I
{
	[Ring]Ring.Schema.Core.Extensions.LexiconExtension::GetLanguageIndex[2]( [Ring]Ring.Schema.Models.Lexicon, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.LexiconExtension::GetTranslation[2]( [Ring]Ring.Schema.Models.Lexicon, [System.Runtime]System.String ) -> a
	[Ring]Ring.Schema.Core.Extensions.LexiconExtension::IsKeyField[1]( [Ring]Ring.Schema.Models.Lexicon ) -> A
	[Ring]Ring.Schema.Core.Extensions.LexiconExtension::IsUniqueField[1]( [Ring]Ring.Schema.Models.Lexicon ) -> a
}

[Ring]Ring.Schema.Core.Extensions.SchemaExtension -> [Ring]a.j
{
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetSequence[2]( [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetJobId[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTableSpace[3]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.EntityType ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTableSpace[2]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTable[2]( [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTable[2]( [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.String ) -> a
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTable[2]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Enums.TableType ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTable[3]( [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.String, [System.Runtime]System.StringComparison ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetMtmTable[2]( [Ring]Ring.Schema.Models.Schema, [System.Runtime]System.String ) -> B
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::Exists[1]( [Ring]Ring.Schema.Models.Schema ) -> a
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::Create[1]( [Ring]Ring.Schema.Models.Schema ) -> B
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::Alter[1]( [Ring]Ring.Schema.Models.Schema ) -> b
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::Exists[2]( [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::CreatePhysicalSchema[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddSchema[1]( [Ring]Ring.Schema.Models.Schema ) -> C
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddSequences[1]( [Ring]Ring.Schema.Models.Schema ) -> c
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddForgenKeys[1]( [Ring]Ring.Schema.Models.Schema ) -> D
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddTableForgenKeys[1]( [Ring]Ring.Schema.Models.Schema ) -> d
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddMtmForgenKeys[1]( [Ring]Ring.Schema.Models.Schema ) -> E
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AnalyzeMetaSchema[0]( ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddTableSpaces[1]( [Ring]Ring.Schema.Models.Schema ) -> e
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AddTables[2]( [Ring]Ring.Schema.Models.Schema, [System.Collections]System.Collections.Generic.HashSet`1<[System.Runtime]System.String> ) -> A
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::GetTableDico[1]( [Ring]Ring.Schema.Models.Schema ) -> F
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::DropTables[2]( [Ring]Ring.Schema.Models.Schema, [System.Collections]System.Collections.Generic.HashSet`1<[System.Runtime]System.String> ) -> a
	[Ring]Ring.Schema.Core.Extensions.SchemaExtension::AlterTables[3]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Schema.Models.Schema, [System.Collections]System.Collections.Generic.HashSet`1<[System.Runtime]System.String> ) -> A
}

[Ring]Ring.Schema.Core.Extensions.SequenceExtension -> [Ring]a.K
{
	[Ring]Ring.Schema.Core.Extensions.SequenceExtension::NextValue[2]( [Ring]Ring.Schema.Models.Sequence, [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Schema.Core.Extensions.SequenceExtension::Exists[1]( [Ring]Ring.Schema.Models.Sequence ) -> A
	[Ring]Ring.Schema.Core.Extensions.SequenceExtension::Create[1]( [Ring]Ring.Schema.Models.Sequence ) -> a
	[Ring]Ring.Schema.Core.Extensions.SequenceExtension::Load[1]( [Ring]Ring.Schema.Models.Sequence ) -> B
}

[Ring]Ring.Schema.Core.Extensions.TableExtension -> [Ring]a.k
{
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetCurrentSchema[1]( [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetField[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetField[3]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String, [System.Runtime]System.StringComparison ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetField[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetFieldIndex[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetLexiconIndex[1]( [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetLexiconIndex[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetRelation[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String ) -> B
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetRelation[3]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String, [System.Runtime]System.StringComparison ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetRelation[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int32 ) -> B
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetRelationIndex[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String ) -> b
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetId[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::SetId[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetInsertClause[1]( [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Core.Extensions.TableExtension::AppendSelectClause[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Text.StringBuilder ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::AppendSelectClause[4]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Text.StringBuilder, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Field>, [System.Collections]System.Collections.Generic.List`1<[Ring]Ring.Schema.Models.Relation> ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetConflictClause[3]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Equals[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Alter[1]( [Ring]Ring.Schema.Models.Table ) -> b
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetFirstKey[1]( [Ring]Ring.Schema.Models.Table ) -> C
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Create[1]( [Ring]Ring.Schema.Models.Table ) -> c
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Exists[1]( [Ring]Ring.Schema.Models.Table ) -> D
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Drop[1]( [Ring]Ring.Schema.Models.Table ) -> d
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Truncate[1]( [Ring]Ring.Schema.Models.Table ) -> E
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Vacuum[1]( [Ring]Ring.Schema.Models.Table ) -> e
	[Ring]Ring.Schema.Core.Extensions.TableExtension::Analyze[1]( [Ring]Ring.Schema.Models.Table ) -> F
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetTableSpace[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.EntityType ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableExtension::AlterRelations[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableExtension::AlterIndexes[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> B
	[Ring]Ring.Schema.Core.Extensions.TableExtension::AlterFields[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> b
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetIndexesdKey[1]( [Ring]Ring.Schema.Models.Table ) -> f
	[Ring]Ring.Schema.Core.Extensions.TableExtension::GetFielsdKey[1]( [Ring]Ring.Schema.Models.Table ) -> G
	[Ring]Ring.Schema.Core.Extensions.TableExtension::UpdateMetadata[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Table ) -> C
	[Ring]Ring.Schema.Core.Extensions.TableExtension::DeleteMetadata[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.Table ) -> A
}

[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension -> [Ring]a.L
{
	[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension::Exists[1]( [Ring]Ring.Schema.Models.TableSpace ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension::Create[1]( [Ring]Ring.Schema.Models.TableSpace ) -> a
	[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension::Exists[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Models.TableSpace, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension::GetNewFieldId[2]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Core.Extensions.TableSpaceExtension::CreateDirectory[1]( [System.Runtime]System.String ) -> A
}

[Ring]Ring.Schema.Builders.EntityBuilder -> [Ring]a.O
{
	[Ring]Ring.Schema.Builders.EntityBuilder::IsClarifySChema[1]( [System.Runtime]System.IO.Stream ) -> A
	[Ring]Ring.Schema.Builders.EntityBuilder::GetRootName[1]( [System.Runtime]System.IO.Stream ) -> a

	[Ring]Ring.Schema.Builders.EntityBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.MetaDataIdBuilder -> [Ring]a.o
{

	[Ring]Ring.Schema.Builders.MetaDataIdBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Data.Mappers.ListMapper -> [Ring]a.U
{
	[Ring]Ring.Data.Mappers.ListMapper::Map[2]( [Ring]Ring.Schema.Models.MetaData[], [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.Mappers.ListMapper::GetSchemaId[1]( [Ring]Ring.Schema.Models.MetaData[] ) -> A
}

[Ring]Ring.Data.Mappers.RecordMapper -> [Ring]a.u
{
	[Ring]Ring.Data.Mappers.RecordMapper::Map[4]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.SByte, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Mappers.RecordMapper::Map[3]( [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Boolean ) -> A
}

[Ring]Ring.Data.Helpers.SqlHelper -> [Ring]a.v
{
	[Ring]Ring.Data.Helpers.SqlHelper::GetQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveQuery ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.PathEvaluatorQuery ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkSaveQuery ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::UpdateMetaData[6]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.MetaData ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetUpdateMetaIdQuery[5]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::BuildSimpleQuery[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Text.StringBuilder ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::BuildOrderBy[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Text.StringBuilder ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::BuildTraverseFromParent[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Text.StringBuilder ) -> a
	[Ring]Ring.Data.Helpers.SqlHelper::GetFilters[5]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Text.StringBuilder, [System.Runtime]System.Int32, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetFilters[4]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Text.StringBuilder, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetOperator[1]( [Ring]Ring.Data.Models.BulkRetrieveFilter ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetParameter[3]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.String, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetParameter[4]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Schema.Enums.FieldType, [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetRowId[1]( [Ring]Ring.Data.DatabaseProvider ) -> A
	[Ring]Ring.Data.Helpers.SqlHelper::GetInsertQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkSaveQuery ) -> a
	[Ring]Ring.Data.Helpers.SqlHelper::GetDeleteQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkSaveQuery ) -> B
	[Ring]Ring.Data.Helpers.SqlHelper::GetInsertMtmQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkSaveQuery ) -> b
	[Ring]Ring.Data.Helpers.SqlHelper::GetUpdateQuery[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkSaveQuery ) -> C
	[Ring]Ring.Data.Helpers.SqlHelper::SetLeftOperand[3]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.BulkRetrieveFilter, [System.Runtime]System.Text.StringBuilder ) -> A
}

[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension -> [Ring]B.A
{
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::GetBindVariableCount[1]( [Ring]Ring.Data.Models.BulkRetrieveQuery ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::GetSubListResult[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::GetDistinctRelationId[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::GetDistinctId[1]( [Ring]Ring.Data.Models.BulkRetrieveQuery ) -> a
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::ContainsForeignKey[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::LoadResult[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::LoadResult[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [Ring]Ring.Data.IDbDataReader ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::LoadResult[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [Ring]Ring.Data.IDbDataSet ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::LoadParameters[2]( [Ring]Ring.Data.Models.BulkRetrieveQuery, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::FormatFloat[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkRetrieveQueryExtension::FormatShortDate[1]( [System.Runtime]System.String ) -> a
}

[Ring]Ring.Data.Core.Extensions.BulkSaveQueryExtension -> [Ring]B.a
{
	[Ring]Ring.Data.Core.Extensions.BulkSaveQueryExtension::BindRelation[1]( [Ring]Ring.Data.Models.BulkSaveQuery ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkSaveQueryExtension::GetQuery[2]( [Ring]Ring.Data.Models.BulkSaveQuery, [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.Core.Extensions.BulkSaveQueryExtension::UpdateCurrentRecord[1]( [Ring]Ring.Data.Models.BulkSaveQuery ) -> a
}

[Ring]Ring.Data.Core.Extensions.LoggerExtension -> [Ring]B.b
{
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Error[5]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Error[6]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Info[5]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Info[6]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Info[7]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Int64, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Info[6]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int64, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Warn[6]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int64, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Warn[7]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Int64, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Warn[5]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> B
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Fatal[5]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> b
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Error[2]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Exception ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Error[3]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Exception ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Error[4]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Int32, [System.Runtime]System.Int64, [System.Runtime]System.Exception ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Fatal[2]( [Ring]Ring.Data.Models.Logger, [System.Runtime]System.Exception ) -> a
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::GetLineNumber[1]( [System.Runtime]System.Exception ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::Log[9]( [System.Runtime]System.Nullable`1<[System.Runtime]System.Int64>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [Ring]Ring.Data.Models.Logger, [Ring]Ring.Schema.Enums.LogLevel, [System.Runtime]System.Int16, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Core.Extensions.LoggerExtension::GetRecord[9]( [System.Runtime]System.Nullable`1<[System.Runtime]System.Int32>, [System.Runtime]System.Nullable`1<[System.Runtime]System.Int64>, [System.Runtime]System.Type, [System.Runtime]System.Int16, [Ring]Ring.Schema.Enums.LogLevel, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
}

[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension -> [Ring]B.C
{
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::AppendField[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [Ring]Ring.Schema.Models.Field ) -> A
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::AppendRelation[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::ClearResults[1]( [Ring]Ring.Data.Models.PathEvaluatorQuery ) -> A
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::LoadResult[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::Clone[1]( [Ring]Ring.Data.Models.PathEvaluatorQuery ) -> a
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::BuildQuery[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [Ring]Ring.Data.IDbConnection ) -> a
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::FieldExist[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Core.Extensions.PathEvaluatorQueryExtension::RelationExist[2]( [Ring]Ring.Data.Models.PathEvaluatorQuery, [System.Runtime]System.String ) -> a
}

[Ring]Ring.Schema.Models.Node -> [Ring]B.G
{

	[Ring]Ring.Schema.Models.Node::.ctor[5]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name
}

[Ring]Ring.Schema.Models.PreparedStatement -> [Ring]B.g
{

	[Ring]Ring.Schema.Models.PreparedStatement::.ctor[5]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) skipped:  special name
}

[Ring]Ring.Schema.Builders.FieldBuilder -> [Ring]B.L
{
	[Ring]Ring.Schema.Builders.FieldBuilder::GetInstance[7]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.FieldType, [System.Runtime]System.Int32, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::GetInstance[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Schema.Enums.FieldType, [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::GetInstance[4]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Enums.SchemaSourceType ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::GetFieldName[3]( [Ring]Ring.Data.DatabaseProvider, [Ring]Ring.Schema.Enums.TableType, [Ring]Ring.Schema.Enums.FieldKey ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::GetTypeId[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::GetDefaultPrimaryKey[1]( [Ring]Ring.Schema.Enums.SchemaSourceType ) -> A
	[Ring]Ring.Schema.Builders.FieldBuilder::IsPrimaryKey[2]( [Ring]Ring.Schema.Enums.SchemaSourceType, [System.Runtime]System.String ) -> A

	[Ring]Ring.Schema.Builders.FieldBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.IndexBuilder -> [Ring]B.l
{
	[Ring]Ring.Schema.Builders.IndexBuilder::GetInstance[3]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.BaseEntity[], [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Schema.Builders.IndexBuilder::GetInstance[7]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Builders.IndexBuilder::GetInstance[7]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.String, [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String[], [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Schema.Builders.IndexBuilder::GetInstance[2]( [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.Index ) -> A
	[Ring]Ring.Schema.Builders.IndexBuilder::GetInstance[1]( [Ring]Ring.Schema.Models.Relation[] ) -> A
	[Ring]Ring.Schema.Builders.IndexBuilder::GetPkInstance[0]( ) -> A

	[Ring]Ring.Schema.Builders.IndexBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.RelationBuilder -> [Ring]B.n
{
	[Ring]Ring.Schema.Builders.RelationBuilder::GetInstance[6]( [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Enums.SchemaLoadType, [Ring]Ring.Schema.Enums.SchemaSourceType, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Builders.RelationBuilder::GetNtmName[4]( [Ring]Ring.Schema.Enums.SchemaSourceType, [Ring]Ring.Schema.Models.MetaData, [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Int32 ) -> A

	[Ring]Ring.Schema.Builders.RelationBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.RoleBuilder -> [Ring]B.O
{
	[Ring]Ring.Schema.Builders.RoleBuilder::GetInstance[6]( [System.Runtime]System.Int64, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean, [System.Runtime]System.Boolean ) -> A

	[Ring]Ring.Schema.Builders.RoleBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.SequenceBuilder -> [Ring]B.P
{
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetInstance[2]( [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.MetaData ) -> A
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetJobIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetLexiconIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetEventIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> B
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetLanguageIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> b
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetIndexIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> C
	[Ring]Ring.Schema.Builders.SequenceBuilder::GetUserIdInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> c

	[Ring]Ring.Schema.Builders.SequenceBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.TableSpaceBuilder -> [Ring]B.Q
{
	[Ring]Ring.Schema.Builders.TableSpaceBuilder::GetInstance[2]( [Ring]Ring.Schema.Models.MetaData, [System.Runtime]System.Int32 ) -> A

	[Ring]Ring.Schema.Builders.TableSpaceBuilder::.ctor[0]( ) skipped:  special name
}

[Ring]Ring.Schema.Builders.MetaDataBuilder/MetaDataFactory -> [Ring]B.N/A
{

	[Ring]Ring.Schema.Builders.MetaDataBuilder/MetaDataFactory::.ctor[2]( [System.Runtime]System.Object, [System.Runtime]System.IntPtr ) skipped:  runtime method
	[Ring]Ring.Schema.Builders.MetaDataBuilder/MetaDataFactory::Invoke[6]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.EntityType, [System.Runtime]System.Int64 ) skipped:  runtime method
	[Ring]Ring.Schema.Builders.MetaDataBuilder/MetaDataFactory::BeginInvoke[8]( [System.Xml.ReaderWriter]System.Xml.XmlReader, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.Int32, [Ring]Ring.Schema.Enums.EntityType, [System.Runtime]System.Int64, [System.Runtime]System.AsyncCallback, [System.Runtime]System.Object ) skipped:  runtime method
	[Ring]Ring.Schema.Builders.MetaDataBuilder/MetaDataFactory::EndInvoke[1]( [System.Runtime]System.IAsyncResult ) skipped:  runtime method
}

[Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=6 -> [Ring]B.c/A
{
}

[Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=22 -> [Ring]B.c/a
{
}

[Ring]<PrivateImplementationDetails>/__StaticArrayInitTypeSize=72 -> [Ring]B.c/B
{
}

Skipped Types:

[Ring]Ring.PropertyType skipped:  KeepPublicApi option in configuration
{

	System.Int32 [Ring]System.Int32 Ring.PropertyType::value__ skipped:  special name
	Ring.PropertyType [Ring]Ring.PropertyType Ring.PropertyType::MetaDataConnection skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Web.WebServer skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Web.WebServer::<Start>b__5_0[0]( ) -> A

	[Ring]Ring.Web.WebServer::get_Port[0]( ) skipped:  skip by property
	[Ring]Ring.Web.WebServer::.ctor[1]( [System.Runtime]System.Int32 ) skipped:  special name
	[Ring]Ring.Web.WebServer::Start[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Web.WebServer::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Web.WebServer::Stop[0]( ) skipped:  KeepPublicApi option in configuration

	System.Net.HttpListener [Ring]System.Net.HttpListener Ring.Web.WebServer::_listener -> A
	System.Int32 [Ring]System.Int32 Ring.Web.WebServer::_port -> A


	System.Int32 [Ring]System.Int32 Ring.Web.WebServer::Port skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Util.Helpers.HashHelper skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Util.Helpers.HashHelper::Djb2[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Util.Helpers.HashHelper::Djb2X[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Util.Helpers.HashHelper::LDjb2X[1]( [System.Runtime]System.String ) -> B
	[Ring]Ring.Util.Helpers.HashHelper::Java[1]( [System.Runtime]System.String ) -> b
	[Ring]Ring.Util.Helpers.HashHelper::Sdbm[1]( [System.Runtime]System.String ) -> C
	[Ring]Ring.Util.Helpers.HashHelper::Murmur3[2]( [System.Runtime]System.String, [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Util.Helpers.HashHelper::Murmur3[2]( [System.Runtime]System.Byte[], [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Util.Helpers.HashHelper::HalfAvalanche[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Util.Helpers.HashHelper::FullAvalanche[1]( [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Util.Helpers.HashHelper::RotateLeft[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) -> A

	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::C132 -> A
	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::C232 -> a
	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::R132 -> B
	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::R232 -> b
	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::M32 -> C
	System.Int32 [Ring]System.Int32 Ring.Util.Helpers.HashHelper::N32 -> c
	System.Char [Ring]System.Char Ring.Util.Helpers.HashHelper::MinLowerChar -> A
}

[Ring]Ring.Schema.SchemaMgr skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Schema.SchemaMgr::Upgrade[3]( [System.Runtime]System.IO.Stream, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Schema.SchemaMgr::Export[2]( [System.Runtime]System.String, [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Schema.SchemaMgr::.ctor[0]( ) skipped:  special name

	Ring.Schema.Builders.SchemaBuilder [Ring]Ring.Schema.Builders.SchemaBuilder Ring.Schema.SchemaMgr::_schemaBuilder -> A
}

[Ring]Ring.Schema.Enums.SchemaLoadType skipped:  KeepPublicApi option in configuration
{

	System.Int64 [Ring]System.Int64 Ring.Schema.Enums.SchemaLoadType::value__ skipped:  special name
	Ring.Schema.Enums.SchemaLoadType [Ring]Ring.Schema.Enums.SchemaLoadType Ring.Schema.Enums.SchemaLoadType::Full skipped:  KeepPublicApi option in configuration
	Ring.Schema.Enums.SchemaLoadType [Ring]Ring.Schema.Enums.SchemaLoadType Ring.Schema.Enums.SchemaLoadType::QueryOnly skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Schema.Enums.SchemaSourceType skipped:  KeepPublicApi option in configuration
{

	System.Int64 [Ring]System.Int64 Ring.Schema.Enums.SchemaSourceType::value__ skipped:  special name
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Enums.SchemaSourceType::NativeXml skipped:  KeepPublicApi option in configuration
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Enums.SchemaSourceType::ClfyXml skipped:  KeepPublicApi option in configuration
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Enums.SchemaSourceType::NativeDataBase skipped:  KeepPublicApi option in configuration
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Enums.SchemaSourceType::ClfyDataBase skipped:  KeepPublicApi option in configuration
	Ring.Schema.Enums.SchemaSourceType [Ring]Ring.Schema.Enums.SchemaSourceType Ring.Schema.Enums.SchemaSourceType::NotDefined skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.BulkRetrieve skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.BulkRetrieve::get_Schema[0]( ) -> A
	[Ring]Ring.Data.BulkRetrieve::set_Schema[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Data.BulkRetrieve::get_Language[0]( ) -> a
	[Ring]Ring.Data.BulkRetrieve::set_Language[1]( [Ring]Ring.Schema.Models.Language ) -> A
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[5]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.String, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.BulkRetrieve::RetrieveRecords[1]( [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.BulkRetrieve::FindQuery[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[5]( [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.Field, [Ring]Ring.Data.OperationType, [System.Runtime]System.String, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.BulkRetrieve::Dispose[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.BulkRetrieve::IsNumber[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.BulkRetrieve::TraverseFromRelation[2]( [Ring]Ring.Schema.Models.Relation, [Ring]Ring.Data.Models.BulkRetrieveQuery ) -> A

	[Ring]Ring.Data.BulkRetrieve::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.BulkRetrieve::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Single ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Double ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Decimal ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [System.Runtime]System.DateTime ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendFilter[4]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.OperationType, [Ring]Ring.Data.List ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::AppendSort[3]( [System.Runtime]System.Int32, [System.Runtime]System.String, [Ring]Ring.Data.Enums.SortOrderType ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::SimpleQuery[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::Clear[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::GetRecordList[1]( [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::GetRelatedRecordList[2]( [Ring]Ring.Data.Record, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::SetPage[3]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::SetSchema[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::SetRootById[2]( [System.Runtime]System.String, [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::SetRoot[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::TraverseFromParent[3]( [System.Runtime]System.Int32, [System.Runtime]System.String, [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::TraverseFromRoot[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::RetrieveRecords[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkRetrieve::Finalize[0]( ) skipped:  external base class or interface

	System.Collections.Generic.List`1<Ring.Data.Models.BulkRetrieveQuery> [Ring]System.Collections.Generic.List`1<Ring.Data.Models.BulkRetrieveQuery> Ring.Data.BulkRetrieve::_data -> A
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.BulkRetrieve::_schema -> A
	System.Boolean [Ring]System.Boolean Ring.Data.BulkRetrieve::_disposed -> A
	Ring.Schema.Models.Language [Ring]Ring.Schema.Models.Language Ring.Data.BulkRetrieve::_language -> A

	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.BulkRetrieve::Schema -> dropped
	Ring.Schema.Models.Language [Ring]Ring.Schema.Models.Language Ring.Data.BulkRetrieve::Language -> dropped
}

[Ring]Ring.Data.BulkSave skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.BulkSave::get_Schema[0]( ) -> A
	[Ring]Ring.Data.BulkSave::set_Schema[1]( [Ring]Ring.Schema.Models.Schema ) -> A
	[Ring]Ring.Data.BulkSave::Save[1]( [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.BulkSave::GenerateMissingId[0]( ) -> a
	[Ring]Ring.Data.BulkSave::SaveWithoutTransaction[1]( [Ring]Ring.Data.IDbConnection ) -> a
	[Ring]Ring.Data.BulkSave::SaveWithTransaction[1]( [Ring]Ring.Data.IDbConnection ) -> B
	[Ring]Ring.Data.BulkSave::GetInsertCountByType[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.BulkSave::GenerateId[2]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Collections.Generic.KeyValuePair`2<[System.Runtime]System.Int32,[System.Runtime]System.Int32>[] ) -> A
	[Ring]Ring.Data.BulkSave::SetId[1]( [System.Collections]System.Collections.Generic.SortedDictionary`2<[System.Runtime]System.Int32,[System.Runtime]System.Int64> ) -> A
	[Ring]Ring.Data.BulkSave::GenerateId[1]( [Ring]Ring.Data.IDbConnection ) -> b
	[Ring]Ring.Data.BulkSave::FindQueryByRecord[1]( [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.BulkSave::FindAllQueriesByRecord[1]( [Ring]Ring.Data.Record ) -> a
	[Ring]Ring.Data.BulkSave::RelateMtoRecord[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> A
	[Ring]Ring.Data.BulkSave::RelateMtoRecord01[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> a
	[Ring]Ring.Data.BulkSave::RelateMtoRecord10[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> B
	[Ring]Ring.Data.BulkSave::RelateMtoRecord00[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> b
	[Ring]Ring.Data.BulkSave::RelateMtoRecord11[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> C
	[Ring]Ring.Data.BulkSave::RelateMtmRecord[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> c
	[Ring]Ring.Data.BulkSave::UneRelateMtmRecord[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> D
	[Ring]Ring.Data.BulkSave::UnRelateMtoRecord[2]( [Ring]Ring.Data.Record, [Ring]Ring.Schema.Models.Relation ) -> A

	[Ring]Ring.Data.BulkSave::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Data.BulkSave::CancelRecord[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::ChangeRecord[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::CountByType[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::DeleteRecord[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::DeleteRecordById[2]( [System.Runtime]System.String, [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::GetRecordByIndex[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::InsertRecord[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::RelateRecords[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::RelateRecordsFromId[4]( [System.Runtime]System.String, [System.Runtime]System.Int64, [Ring]Ring.Data.Record, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::RelateRecordsFromToId[5]( [System.Runtime]System.String, [System.Runtime]System.Int64, [System.Runtime]System.String, [System.Runtime]System.Int64, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::RelateRecordsToId[4]( [Ring]Ring.Data.Record, [System.Runtime]System.String, [System.Runtime]System.Int64, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::Save[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::UnrelateRecords[3]( [Ring]Ring.Data.Record, [Ring]Ring.Data.Record, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.BulkSave::UpdateRecord[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration

	System.Collections.Generic.List`1<Ring.Data.Models.BulkSaveQuery> [Ring]System.Collections.Generic.List`1<Ring.Data.Models.BulkSaveQuery> Ring.Data.BulkSave::_data -> A
	System.Boolean [Ring]System.Boolean Ring.Data.BulkSave::_bindRelation -> A
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.BulkSave::_schema -> A

	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.BulkSave::Schema -> dropped
}

[Ring]Ring.Data.ConnectionState skipped:  KeepPublicApi option in configuration
{

	System.Int32 [Ring]System.Int32 Ring.Data.ConnectionState::value__ skipped:  special name
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.ConnectionState::Broken skipped:  KeepPublicApi option in configuration
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.ConnectionState::Closed skipped:  KeepPublicApi option in configuration
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.ConnectionState::Open skipped:  KeepPublicApi option in configuration
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.ConnectionState::Executing skipped:  KeepPublicApi option in configuration
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.ConnectionState::NotDefined skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.DatabaseProvider skipped:  KeepPublicApi option in configuration
{

	System.Byte [Ring]System.Byte Ring.Data.DatabaseProvider::value__ skipped:  special name
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Data.DatabaseProvider::Sqlite skipped:  KeepPublicApi option in configuration
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Data.DatabaseProvider::Oracle skipped:  KeepPublicApi option in configuration
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Data.DatabaseProvider::PostgreSql skipped:  KeepPublicApi option in configuration
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Data.DatabaseProvider::MySql skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.DbType skipped:  KeepPublicApi option in configuration
{

	System.Byte [Ring]System.Byte Ring.Data.DbType::value__ skipped:  special name
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::Double skipped:  KeepPublicApi option in configuration
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::Int64 skipped:  KeepPublicApi option in configuration
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::String skipped:  KeepPublicApi option in configuration
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::Clob skipped:  KeepPublicApi option in configuration
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::Bool skipped:  KeepPublicApi option in configuration
	Ring.Data.DbType [Ring]Ring.Data.DbType Ring.Data.DbType::DateTime skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.Import skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.Import::ProcessLexicon[2]( [System.Runtime]System.Int32, [Ring]Ring.Util.Models.ExcelSheet ) -> A
	[Ring]Ring.Data.Import::ProcessEntity[5]( [System.Runtime]System.Int64, [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.IImportParameters, [Ring]Ring.Util.Models.ExcelSheet, [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Data.Import::SaveRecord[4]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int64, [Ring]Ring.Data.Record, [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.Import::GetSheetList[2]( [Ring]Ring.Schema.Models.Schema, [Ring]Ring.Util.ExcelWorkbook ) -> A
	[Ring]Ring.Data.Import::FindRecord[4]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [Ring]Ring.Schema.Models.Table, [Ring]Ring.Util.Models.ExcelField[] ) -> A
	[Ring]Ring.Data.Import::SaveMtm[4]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [Ring]Ring.Data.Record, [Ring]Ring.Util.Models.ExcelField[] ) -> A
	[Ring]Ring.Data.Import::SaveMtm[3]( [Ring]Ring.Data.IDbConnection, [System.Collections]System.Collections.Generic.List`1<[System.Runtime]System.Tuple`2<[System.Runtime]System.String,[System.Runtime]System.Int64>>, [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.Import::SetRecord[5]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.IImportParameters, [System.Runtime]System.Int32, [Ring]Ring.Data.Record, [Ring]Ring.Util.Models.ExcelField[] ) -> A
	[Ring]Ring.Data.Import::SetRelation[4]( [Ring]Ring.Data.IDbConnection, [System.Runtime]System.Int32, [Ring]Ring.Data.Record, [Ring]Ring.Util.Models.ExcelField[] ) -> a
	[Ring]Ring.Data.Import::GetLexiconId[1]( [Ring]Ring.Data.Record[] ) -> A
	[Ring]Ring.Data.Import::SetDate[3]( [Ring]Ring.Data.Record, [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Import::GetDate[1]( [System.Runtime]System.Double ) -> A
	[Ring]Ring.Data.Import::GetKey[2]( [Ring]Ring.Schema.Models.Table, [Ring]Ring.Util.Models.ExcelSheet ) -> A
	[Ring]Ring.Data.Import::IsMissingValue[1]( [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.Import::FinalizeTableImport[3]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.Int32, [System.Runtime]System.Int64 ) -> A

	[Ring]Ring.Data.Import::ParseFile[2]( [System.Runtime]System.String, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Import::ParseFile[1]( [Ring]Ring.Data.IImportParameters ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Import::.ctor[0]( ) skipped:  special name

	Ring.Data.Models.Logger [Ring]Ring.Data.Models.Logger Ring.Data.Import::_log -> A
	Ring.Util.Builders.RecordBuilder [Ring]Ring.Util.Builders.RecordBuilder Ring.Data.Import::_recordBuilder -> A
	Ring.Schema.Builders.IndexBuilder [Ring]Ring.Schema.Builders.IndexBuilder Ring.Data.Import::_indexBuilder -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Import::_insertCount -> A
	System.Int32 [Ring]System.Int32 Ring.Data.Import::_updateCount -> a
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.Import::_currentSchema -> A
}

[Ring]Ring.Data.List skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.List::get_Type[0]( ) -> A
	[Ring]Ring.Data.List::get_Item[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.List::set_Item[2]( [System.Runtime]System.Int32, [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.List::AddRange[1]( [Ring]Ring.Data.Record[] ) -> A
	[Ring]Ring.Data.List::AllowCapicity[0]( ) -> a
	[Ring]Ring.Data.List::CollapseArrays[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.List::Items[0]( ) -> B
	[Ring]Ring.Data.List::System.Collections.IEnumerable.GetEnumerator[0]( ) -> b

	[Ring]Ring.Data.List::get_ItemType[0]( ) skipped:  skip by property
	[Ring]Ring.Data.List::set_ItemType[1]( [System.Runtime]System.String ) skipped:  skip by property
	[Ring]Ring.Data.List::get_Count[0]( ) skipped:  skip by property
	[Ring]Ring.Data.List::get_Sorted[0]( ) skipped:  skip by property
	[Ring]Ring.Data.List::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.List::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Data.List::.ctor[1]( [Ring]Ring.Data.Enums.ItemType ) skipped:  special name
	[Ring]Ring.Data.List::.ctor[2]( [Ring]Ring.Data.Enums.ItemType, [System.Runtime]System.Int32 ) skipped:  special name
	[Ring]Ring.Data.List::.ctor[1]( [Ring]Ring.Data.List ) skipped:  special name
	[Ring]Ring.Data.List::Clear[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::FindFirstIndex[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::FindFirstIndex[1]( [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::FindFirstIndex[2]( [System.Runtime]System.String, [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::FindFirstIndex[10]( [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::ItemByIndex[1]( [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::ReplaceByIndex[2]( [System.Runtime]System.Int32, [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::GetItemByIndex[2]( [System.Runtime]System.Int32, [Ring]Ring.Data.Record& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::GetItemByIndex[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int32& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::GetItemByIndex[2]( [System.Runtime]System.Int32, [System.Runtime]System.String& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::GetItemByIndex[2]( [System.Runtime]System.Int32, [System.Runtime]System.Int64& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::RemoveByIndex[1]( [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::AppendItem[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::AppendItem[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::AppendItem[1]( [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::AppendItem[1]( [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::AppendItem[1]( [Ring]Ring.Data.List ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::Sort[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::Sort[1]( [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::Sort[1]( [Ring]Ring.Data.Enums.SortOrderType ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::Sort[2]( [Ring]Ring.Data.Enums.SortOrderType, [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::Copy[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.List::GetEnumerator[0]( ) skipped:  external base class or interface

	Ring.Data.Record[][] [Ring]Ring.Data.Record[][] Ring.Data.List::_data -> A
	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.List::_type -> A
	System.Int32 [Ring]System.Int32 Ring.Data.List::_capacity -> A
	System.Int32 [Ring]System.Int32 Ring.Data.List::_count -> a
	System.Boolean [Ring]System.Boolean Ring.Data.List::_sorted -> A

	Ring.Data.Enums.ItemType [Ring]Ring.Data.Enums.ItemType Ring.Data.List::Type -> dropped
	Ring.Data.Record [Ring]Ring.Data.Record Ring.Data.List::Item -> dropped

	System.String [Ring]System.String Ring.Data.List::ItemType skipped:  KeepPublicApi option in configuration
	System.Int32 [Ring]System.Int32 Ring.Data.List::Count skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.List::Sorted skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.OperationType skipped:  KeepPublicApi option in configuration
{

	System.Int32 [Ring]System.Int32 Ring.Data.OperationType::value__ skipped:  special name
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::Equal skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::NotEqual skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::Greater skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::GreaterOrEqual skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::Less skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::LessOrEqual skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::Like skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::NotLike skipped:  KeepPublicApi option in configuration
	Ring.Data.OperationType [Ring]Ring.Data.OperationType Ring.Data.OperationType::In skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.PathEvaluator skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.PathEvaluator::get_LogicalQueryCount[0]( ) -> A
	[Ring]Ring.Data.PathEvaluator::GetValue[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.PathEvaluator::GetType[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.PathEvaluator::RetrievePaths[1]( [Ring]Ring.Data.IDbConnection ) -> A
	[Ring]Ring.Data.PathEvaluator::ValidPath[2]( [System.Runtime]System.String, [System.Runtime]System.String& ) -> A
	[Ring]Ring.Data.PathEvaluator::Dispose[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.PathEvaluator::BuildQueries[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.PathEvaluatorQuery[] ) -> A
	[Ring]Ring.Data.PathEvaluator::LoadResults[2]( [Ring]Ring.Data.IDbConnection, [Ring]Ring.Data.Models.PathEvaluatorQuery[] ) -> a
	[Ring]Ring.Data.PathEvaluator::ClearResults[0]( ) -> a

	[Ring]Ring.Data.PathEvaluator::get_ObectType[0]( ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::get_ObjectId[0]( ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::set_ObjectId[1]( [System.Runtime]System.Int64 ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::get_IsEmpty[0]( ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::get_ExecutionTime[0]( ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::get_Item[1]( [System.Runtime]System.String ) skipped:  skip by property
	[Ring]Ring.Data.PathEvaluator::Dispose[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.PathEvaluator::Finalize[0]( ) skipped:  external base class or interface
	[Ring]Ring.Data.PathEvaluator::.ctor[3]( [System.Runtime]System.Int32, [System.Runtime]System.Int32, [System.Runtime]System.Int64 ) skipped:  special name
	[Ring]Ring.Data.PathEvaluator::.ctor[3]( [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.String,[Ring]Ring.Data.Models.PathEvaluatorResult>, [System.Collections]System.Collections.Generic.Dictionary`2<[System.Runtime]System.String,[Ring]Ring.Data.Models.PathEvaluatorQuery>, [Ring]Ring.Schema.Models.Schema ) skipped:  special name
	[Ring]Ring.Data.PathEvaluator::AppendPath[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.PathEvaluator::Clear[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.PathEvaluator::RetrievePaths[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.PathEvaluator::IsValidPath[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.PathEvaluator::Clone[1]( [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.PathEvaluator::ContainsPath[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration

	System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Models.PathEvaluatorResult> [Ring]System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Models.PathEvaluatorResult> Ring.Data.PathEvaluator::_resultList -> A
	System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Models.PathEvaluatorQuery> [Ring]System.Collections.Generic.Dictionary`2<System.String,Ring.Data.Models.PathEvaluatorQuery> Ring.Data.PathEvaluator::_queryList -> A
	Ring.Schema.Models.Schema [Ring]Ring.Schema.Models.Schema Ring.Data.PathEvaluator::_schema -> A
	System.Boolean [Ring]System.Boolean Ring.Data.PathEvaluator::_queryBuilded -> A
	System.TimeSpan [Ring]System.TimeSpan Ring.Data.PathEvaluator::_executionTime -> A
	System.Boolean [Ring]System.Boolean Ring.Data.PathEvaluator::_disposed -> a

	System.Int32 [Ring]System.Int32 Ring.Data.PathEvaluator::LogicalQueryCount -> dropped

	System.Int32 [Ring]System.Int32 Ring.Data.PathEvaluator::ObectType skipped:  KeepPublicApi option in configuration
	System.Int64 [Ring]System.Int64 Ring.Data.PathEvaluator::ObjectId skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.PathEvaluator::IsEmpty skipped:  KeepPublicApi option in configuration
	System.TimeSpan [Ring]System.TimeSpan Ring.Data.PathEvaluator::ExecutionTime skipped:  KeepPublicApi option in configuration
	System.String [Ring]System.String Ring.Data.PathEvaluator::Item skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.Record skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.Record::get_Item[1]( [System.Runtime]System.Int32 ) -> A
	[Ring]Ring.Data.Record::get_Table[0]( ) -> A
	[Ring]Ring.Data.Record::set_Table[1]( [Ring]Ring.Schema.Models.Table ) -> A
	[Ring]Ring.Data.Record::ClearData[0]( ) -> a
	[Ring]Ring.Data.Record::GetField[0]( ) -> B
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.SByte& ) -> A
	[Ring]Ring.Data.Record::IsEmpty[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Record::GetFieldType[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.Record::GetRelation[1]( [System.Runtime]System.String ) -> B
	[Ring]Ring.Data.Record::IsFieldChanged[1]( [System.Runtime]System.String ) -> b
	[Ring]Ring.Data.Record::GetFieldChanges[0]( ) -> b
	[Ring]Ring.Data.Record::GetRelationChanges[0]( ) -> C
	[Ring]Ring.Data.Record::IsFieldExist[1]( [System.Runtime]System.String ) -> C
	[Ring]Ring.Data.Record::SetDirty[1]( [System.Runtime]System.Boolean ) -> A
	[Ring]Ring.Data.Record::SetField[1]( [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Record::SetField[1]( [System.Runtime]System.String ) -> c
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.SByte ) -> A
	[Ring]Ring.Data.Record::SetField[1]( [Ring]Ring.Data.Record ) -> A
	[Ring]Ring.Data.Record::SetRelation[2]( [System.Runtime]System.String, [System.Runtime]System.Int64 ) -> A
	[Ring]Ring.Data.Record::SetRelation[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Record::SetIntegerField[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.Record::SetStringField[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.Record::SetFloatField[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) -> B
	[Ring]Ring.Data.Record::SetDateTimeField[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.Record::SetBooleanField[2]( [System.Runtime]System.String, [System.Runtime]System.String ) -> B
	[Ring]Ring.Data.Record::GetDateFromFieldId[1]( [System.Runtime]System.Int32 ) -> a
	[Ring]Ring.Data.Record::FieldChange[1]( [System.Runtime]System.Int32 ) -> B
	[Ring]Ring.Data.Record::SetData[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) -> b

	[Ring]Ring.Data.Record::get_RecordType[0]( ) skipped:  skip by property
	[Ring]Ring.Data.Record::set_RecordType[1]( [System.Runtime]System.String ) skipped:  skip by property
	[Ring]Ring.Data.Record::get_IsNew[0]( ) skipped:  skip by property
	[Ring]Ring.Data.Record::get_IsDirty[0]( ) skipped:  skip by property
	[Ring]Ring.Data.Record::.ctor[0]( ) skipped:  special name
	[Ring]Ring.Data.Record::.ctor[2]( [Ring]Ring.Schema.Models.Table, [System.Runtime]System.String[] ) skipped:  special name
	[Ring]Ring.Data.Record::.ctor[1]( [Ring]Ring.Schema.Models.Table ) skipped:  special name
	[Ring]Ring.Data.Record::GetField[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.Int32& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.Nullable`1<System.Int32>& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.Int64& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.DateTime& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::GetField[2]( [System.Runtime]System.String, [System.Runtime]System.Boolean& ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.DateTime ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.Int64 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.Int32 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.Int16 ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::SetField[2]( [System.Runtime]System.String, [System.Runtime]System.Double ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::ChangeToNew[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::IsExactly[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::Equals[1]( [Ring]Ring.Data.Record ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.Record::Copy[0]( ) skipped:  KeepPublicApi option in configuration

	System.String[] [Ring]System.String[] Ring.Data.Record::_data -> A
	System.Collections.Generic.SortedDictionary`2<System.Int32,System.Int64> [Ring]System.Collections.Generic.SortedDictionary`2<System.Int32,System.Int64> Ring.Data.Record::_extraInfo -> A
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Record::<Table>k__BackingField -> A

	System.String [Ring]System.String Ring.Data.Record::Item -> dropped
	Ring.Schema.Models.Table [Ring]Ring.Schema.Models.Table Ring.Data.Record::Table -> dropped

	System.String [Ring]System.String Ring.Data.Record::RecordType skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.Record::IsNew skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.Record::IsDirty skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.Enums.SortOrderType skipped:  KeepPublicApi option in configuration
{

	System.Int32 [Ring]System.Int32 Ring.Data.Enums.SortOrderType::value__ skipped:  special name
	Ring.Data.Enums.SortOrderType [Ring]Ring.Data.Enums.SortOrderType Ring.Data.Enums.SortOrderType::Ascending skipped:  KeepPublicApi option in configuration
	Ring.Data.Enums.SortOrderType [Ring]Ring.Data.Enums.SortOrderType Ring.Data.Enums.SortOrderType::Descending skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.GlobalContext skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.GlobalContext::get_Properties[0]( ) skipped:  skip by property


	Ring.PropertiesContext [Ring]Ring.PropertiesContext Ring.GlobalContext::Properties skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.PropertiesContext skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.PropertiesContext::get_Item[1]( [Ring]Ring.PropertyType ) skipped:  skip by property
	[Ring]Ring.PropertiesContext::set_Item[2]( [Ring]Ring.PropertyType, [System.Runtime]System.Object ) skipped:  skip by property
	[Ring]Ring.PropertiesContext::.ctor[0]( ) skipped:  special name


	System.Object [Ring]System.Object Ring.PropertiesContext::Item skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IConfiguration skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IConfiguration::get_Driver[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IConfiguration::get_ConnectionString[0]( ) skipped:  skip by property


	System.String [Ring]System.String Ring.Data.IConfiguration::Driver skipped:  KeepPublicApi option in configuration
	System.String [Ring]System.String Ring.Data.IConfiguration::ConnectionString skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbCommand skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbCommand::get_CommandText[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::set_CommandText[1]( [System.Runtime]System.String ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::get_CommandTimeout[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::set_CommandTimeout[1]( [System.Runtime]System.Int32 ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::get_Connection[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::set_Connection[1]( [Ring]Ring.Data.IDbConnection ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::get_Transaction[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::set_Transaction[1]( [Ring]Ring.Data.IDbTransaction ) skipped:  skip by property
	[Ring]Ring.Data.IDbCommand::ExecuteNonQuery[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::ExecuteScalar[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::CreateNewInstance[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::SetParameterValue[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::AddParameter[1]( [Ring]Ring.Data.IDbParameter ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::ExecuteReader[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbCommand::AddParameters[1]( [Ring]Ring.Data.IDbParameter[] ) skipped:  KeepPublicApi option in configuration


	System.String [Ring]System.String Ring.Data.IDbCommand::CommandText skipped:  KeepPublicApi option in configuration
	System.Int32 [Ring]System.Int32 Ring.Data.IDbCommand::CommandTimeout skipped:  KeepPublicApi option in configuration
	Ring.Data.IDbConnection [Ring]Ring.Data.IDbConnection Ring.Data.IDbCommand::Connection skipped:  KeepPublicApi option in configuration
	Ring.Data.IDbTransaction [Ring]Ring.Data.IDbTransaction Ring.Data.IDbCommand::Transaction skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbConnection skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbConnection::get_ConnectionString[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::get_IsReadOnly[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::get_CreationTime[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::get_Id[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::get_State[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::get_Provider[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbConnection::Open[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::Close[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::BeginTransaction[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewInstance[2]( [System.Runtime]System.Int32, [System.Runtime]System.Boolean ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewInstance[3]( [System.Runtime]System.Boolean, [Ring]Ring.Data.DatabaseProvider, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewCommandInstance[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewAdapterInstance[1]( [Ring]Ring.Data.IDbCommand ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewDataSetInstance[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbConnection::CreateNewParameterInstance[3]( [Ring]Ring.Data.DbType, [System.Runtime]System.String, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration


	System.String [Ring]System.String Ring.Data.IDbConnection::ConnectionString skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.IDbConnection::IsReadOnly skipped:  KeepPublicApi option in configuration
	System.DateTime [Ring]System.DateTime Ring.Data.IDbConnection::CreationTime skipped:  KeepPublicApi option in configuration
	System.Int32 [Ring]System.Int32 Ring.Data.IDbConnection::Id skipped:  KeepPublicApi option in configuration
	Ring.Data.ConnectionState [Ring]Ring.Data.ConnectionState Ring.Data.IDbConnection::State skipped:  KeepPublicApi option in configuration
	Ring.Data.DatabaseProvider [Ring]Ring.Data.DatabaseProvider Ring.Data.IDbConnection::Provider skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbDataReader skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbDataReader::get_HasRows[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbDataReader::Read[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbDataReader::Close[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbDataReader::Get[1]( [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration


	System.Boolean [Ring]System.Boolean Ring.Data.IDbDataReader::HasRows skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbDataSet skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbDataSet::get_FirstTable[0]( ) skipped:  skip by property


	Ring.Data.IDbDataTable [Ring]Ring.Data.IDbDataTable Ring.Data.IDbDataSet::FirstTable skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbDataTable skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbDataTable::get_RowsCount[0]( ) skipped:  skip by property
	[Ring]Ring.Data.IDbDataTable::Rows[2]( [System.Runtime]System.Int32, [System.Runtime]System.String ) skipped:  KeepPublicApi option in configuration


	System.Int32 [Ring]System.Int32 Ring.Data.IDbDataTable::RowsCount skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IImportParameters skipped:  KeepPublicApi option in configuration
{
	[Ring]Ring.Data.IImportParameters::get_File[0]( ) -> A
	[Ring]Ring.Data.IImportParameters::set_File[1]( [System.Runtime]System.String ) -> A
	[Ring]Ring.Data.IImportParameters::get_SchemaName[0]( ) -> a
	[Ring]Ring.Data.IImportParameters::set_SchemaName[1]( [System.Runtime]System.String ) -> a
	[Ring]Ring.Data.IImportParameters::get_TrimValue[0]( ) -> B
	[Ring]Ring.Data.IImportParameters::set_TrimValue[1]( [System.Runtime]System.Boolean ) -> A


	System.String [Ring]System.String Ring.Data.IImportParameters::File skipped:  KeepPublicApi option in configuration
	System.String [Ring]System.String Ring.Data.IImportParameters::SchemaName skipped:  KeepPublicApi option in configuration
	System.Boolean [Ring]System.Boolean Ring.Data.IImportParameters::TrimValue skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbAdapter skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbAdapter::Fill[1]( [Ring]Ring.Data.IDbDataSet ) skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbTransaction skipped:  KeepPublicApi option in configuration
{

	[Ring]Ring.Data.IDbTransaction::Rollback[0]( ) skipped:  KeepPublicApi option in configuration
	[Ring]Ring.Data.IDbTransaction::Commit[0]( ) skipped:  KeepPublicApi option in configuration
}

[Ring]Ring.Data.IDbParameter skipped:  KeepPublicApi option in configuration
{
}

Renamed Resources:


Skipped Resources:

